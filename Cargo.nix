
# This file was @generated by crate2nix 0.9.0-alpha.1 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrate ? pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "buffered-reader" = rec {
      packageId = "buffered-reader";
      build = internal.buildRustCrateWithFeatures {
        packageId = "buffered-reader";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-autocrypt" = rec {
      packageId = "sequoia-autocrypt";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-autocrypt";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-core" = rec {
      packageId = "sequoia-core";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-core";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-ffi" = rec {
      packageId = "sequoia-ffi";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-ffi";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-ffi-macros" = rec {
      packageId = "sequoia-ffi-macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-ffi-macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-guide" = rec {
      packageId = "sequoia-guide";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-guide";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-ipc" = rec {
      packageId = "sequoia-ipc";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-ipc";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-net" = rec {
      packageId = "sequoia-net";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-net";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-openpgp" = rec {
      packageId = "sequoia-openpgp";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-openpgp";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-openpgp-ffi" = rec {
      packageId = "sequoia-openpgp-ffi";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-openpgp-ffi";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-sop" = rec {
      packageId = "sequoia-sop";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-sop";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-sq" = rec {
      packageId = "sequoia-sq";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-sq";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-sqv" = rec {
      packageId = "sequoia-sqv";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-sqv";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sequoia-store" = rec {
      packageId = "sequoia-store";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sequoia-store";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.13.0";
        edition = "2015";
        sha256 = "0wih40hagpvpsqrvz7jb1cyv00hlsr9hhrwpjz5b76k6f4rjsshv";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "Philip Craig <philipjcraig@gmail.com>"
          "Jon Gjengset <jon@thesquareplanet.com>"
          "Noah Bergbauer <noah.bergbauer@tum.de>"
        ];
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "default" = [ "rustc-demangle" "cpp_demangle" "std-object" "fallible-iterator" "smallvec" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std" ];
          "std" = [ "gimli/std" ];
          "std-object" = [ "std" "object" "object/std" "object/compression" "gimli/endian-reader" ];
        };
      };
      "adler" = rec {
        crateName = "adler";
        version = "0.2.3";
        edition = "2015";
        sha256 = "0zpdsrfq5bd34941gmrlamnzjfbsx0x586afb7b0jqhr8g1lwapf";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "ahash" = rec {
        crateName = "ahash";
        version = "0.4.6";
        edition = "2018";
        sha256 = "0k0ngbwf0vim6kryq9rngqrghjnqfchm00q3ls3cwyp43clrwy7n";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        features = {
          "compile-time-rng" = [ "const-random" ];
          "default" = [ "compile-time-rng" "std" ];
        };
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "0.7.14";
        edition = "2015";
        sha256 = "038x2d8n736llndrggi8pl8gk3yl66pbnp9r7mnhr2v70dqwwxml";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "memchr/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ansi_term" = rec {
        crateName = "ansi_term";
        version = "0.11.0";
        edition = "2015";
        sha256 = "16wpvrghvd0353584i1idnsgm0r3vchg8fyrm0x8ayv1rgvbljgf";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."os" == "windows");
            features = [ "errhandlingapi" "consoleapi" "processenv" ];
          }
        ];
        
      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.33";
        edition = "2018";
        sha256 = "07778s6k1qb1i3azjj2mcgmml31i1s6yla61x8scidqzpgzkdzd1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.6";
        edition = "2015";
        sha256 = "0i6m1l3f73i0lf0cjdf5rh3xpvxydyhfbakq7xx7bkrp5qajgid4";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];
        
      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1f5mca8kiiwhvhxd1mbnq68j6v6rk139sch567zwwzl6hs37vxyg";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "ascii-canvas" = rec {
        crateName = "ascii-canvas";
        version = "2.0.0";
        edition = "2015";
        sha256 = "0a9s8vrbc5jr6ry5ygjyfqmbs9gyya1v6dsxzsczpai8z4nvg3pz";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "term";
            packageId = "term";
          }
        ];
        
      };
      "assert_cli" = rec {
        crateName = "assert_cli";
        version = "0.6.3";
        edition = "2015";
        crateBin = [];
        sha256 = "0jc1bh3cvnl66bl7s5gr1xnm0hl8d2l3gmil0pmhp5v2xp0bg6m2";
        authors = [
          "Pascal Hertleif <killercup@gmail.com>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "difference";
            packageId = "difference";
          }
          {
            name = "environment";
            packageId = "environment";
          }
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "failure_derive";
            packageId = "failure_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        
      };
      "atty" = rec {
        crateName = "atty";
        version = "0.2.14";
        edition = "2015";
        sha256 = "1s7yslcs6a28c5vz7jwj63lkfgyx8mx99fdirlhi9lbhhzhrpcyr";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (target."os" == "hermit");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          }
        ];
        
      };
      "autocfg 0.1.7" = rec {
        crateName = "autocfg";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1chwgimpx5z7xbag7krr9d8asxfqbh683qhgl9kn3hxk2l0djj8x";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        
      };
      "autocfg 1.0.1" = rec {
        crateName = "autocfg";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0jj6i9zn4gjl03kjvziqdji6rwx8ykz8zk2ngpc331z2g3fk3c6d";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.53";
        edition = "2018";
        sha256 = "13l3p721k4vwwckb9ig18fzbg9wywqy2rpccwsypq91g1rp5hyvh";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "object";
            packageId = "object";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "read_core" "elf" "macho" "pe" "unaligned" ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        features = {
          "default" = [ "std" "gimli-symbolize" ];
          "gimli-symbolize" = [ "addr2line" "miniz_oxide" "object" ];
          "libbacktrace" = [ "backtrace-sys/backtrace-sys" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" ];
          "verify-winapi" = [ "winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/memoryapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/tlhelp32" "winapi/winbase" "winapi/winnt" ];
        };
        resolvedDefaultFeatures = [ "addr2line" "default" "gimli-symbolize" "miniz_oxide" "object" "std" ];
      };
      "base64 0.12.3" = rec {
        crateName = "base64";
        version = "0.12.3";
        edition = "2018";
        sha256 = "1zq33had71xh48n17g4kqs96szhx3yh7qibzwi4fk217n3vz0h9l";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "base64 0.13.0" = rec {
        crateName = "base64";
        version = "0.13.0";
        edition = "2018";
        sha256 = "1z82g23mbzjgijkpcrilc7nljpxpvpf7zxf6iyiapkgka2ngwkch";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bindgen" = rec {
        crateName = "bindgen";
        version = "0.51.1";
        edition = "2015";
        crateBin = [];
        sha256 = "0x9gndlnwmxsihxvsc3izyyss7g8b2djn0daafshj1gcy69i7mzb";
        authors = [
          "Jyun-Yan You <jyyou.tw@gmail.com>"
          "Emilio Cobos Álvarez <emilio@crisal.io>"
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "The Servo project developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cexpr";
            packageId = "cexpr";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "clang-sys";
            packageId = "clang-sys";
            features = [ "runtime" "clang_6_0" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "peeking_take_while";
            packageId = "peeking_take_while";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        devDependencies = [
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        features = {
          "default" = [ "logging" "clap" "which-rustfmt" ];
          "logging" = [ "env_logger" "log" ];
          "which-rustfmt" = [ "which" ];
        };
      };
      "bit-set" = rec {
        crateName = "bit-set";
        version = "0.5.2";
        edition = "2015";
        sha256 = "1pjrmpsnad5ipwjsv8ppi0qrhqvgpyn3wfbvk7jy8dga6mhf24bf";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        dependencies = [
          {
            name = "bit-vec";
            packageId = "bit-vec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "bit-vec/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bit-vec" = rec {
        crateName = "bit-vec";
        version = "0.6.2";
        edition = "2015";
        sha256 = "1lwws9l5x4j2m1aw9qvr7pbhsk0v02xmhy6419jqa6la5mgwa3az";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.2.1";
        edition = "2015";
        sha256 = "14qnd5nq8p2almk79m4m8ydqhd413yaxsyjp5xd19g3mikzf47fg";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "blake2b_simd" = rec {
        crateName = "blake2b_simd";
        version = "0.5.10";
        edition = "2018";
        sha256 = "12icvk8ixlivv3jv5nyrg01sajp4s279zb1kmif0nfja4ms2vyyq";
        authors = [
          "Jack O'Connor"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "block-buffer 0.7.3" = rec {
        crateName = "block-buffer";
        version = "0.7.3";
        edition = "2015";
        sha256 = "12v8wizynqin0hqf140kmp9s38q223mp1b0hkqk8j5pk8720v560";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-padding";
            packageId = "block-padding";
          }
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.12.3";
          }
        ];
        
      };
      "block-buffer 0.9.0" = rec {
        crateName = "block-buffer";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1r4pf90s7d7lj1wdjhlnqa26vvbm6pnc33z138lxpnp9srpi2lj1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.4";
          }
        ];
        
      };
      "block-padding" = rec {
        crateName = "block-padding";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1xbkmysiz23vimd17rnsjpw9bgjxipwfslwyygqlkx4in3dxwygs";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
        ];
        
      };
      "bstr" = rec {
        crateName = "bstr";
        version = "0.2.13";
        edition = "2015";
        sha256 = "0cd9gn35hb020r3zccmc2m710wavk2iyqn60j8aqgxqdnzywmb1i";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "unicode" ];
          "serde1" = [ "std" "serde1-nostd" "serde/std" ];
          "serde1-nostd" = [ "serde" ];
          "std" = [ "memchr/use_std" ];
          "unicode" = [ "lazy_static" "regex-automata" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "regex-automata" "serde" "serde1" "serde1-nostd" "std" "unicode" ];
      };
      "buffered-reader" = rec {
        crateName = "buffered-reader";
        version = "0.20.0";
        edition = "2018";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./buffered-reader; };
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "bzip2";
            packageId = "bzip2";
            optional = true;
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "compression" = [ "compression-deflate" "compression-bzip2" ];
          "compression-bzip2" = [ "bzip2" ];
          "compression-deflate" = [ "flate2" ];
          "default" = [ "compression" ];
        };
        resolvedDefaultFeatures = [ "bzip2" "compression" "compression-bzip2" "compression-deflate" "default" "flate2" ];
      };
      "byte-tools" = rec {
        crateName = "byte-tools";
        version = "0.3.1";
        edition = "2015";
        sha256 = "1mqi29wsm8njpl51pfwr31wmpzs5ahlcb40wsjyd92l90ixcmdg3";
        authors = [
          "RustCrypto Developers"
        ];
        
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.3.4";
        edition = "2015";
        sha256 = "1pkjfhgjnq898g1d38ygcfi0msg3m6756cwv0sgysj1d26p8mi08";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "0.4.12";
        edition = "2015";
        sha256 = "0768a55q2fsqdjsvcv98ndg9dq7w2g44dvq1avhwpxrdzbydyvr0";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "either";
            packageId = "either";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
        ];
        features = {
          "i128" = [ "byteorder/i128" ];
        };
        resolvedDefaultFeatures = [ "either" ];
      };
      "bzip2" = rec {
        crateName = "bzip2";
        version = "0.4.1";
        edition = "2015";
        sha256 = "1gpwm7qj8adi0zffm8r17vkv6f98d1q9glvpjk28v0wb6kz88p97";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "bzip2-sys";
            packageId = "bzip2-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "tokio" = [ "tokio-io" "futures" ];
        };
      };
      "bzip2-sys" = rec {
        crateName = "bzip2-sys";
        version = "0.1.9+1.0.8";
        edition = "2015";
        sha256 = "0pi8lxzb1104q9cpvv1jgnk909cggqh2zcdhywqwlbq6c2i3jfxd";
        libName = "bzip2_sys";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        
      };
      "capnp" = rec {
        crateName = "capnp";
        version = "0.10.3";
        edition = "2018";
        sha256 = "17hsnmlcrzksjjpwpz51y8g36xzq8042i2cwns0lsg7rixfw2rxq";
        authors = [
          "David Renshaw <dwrenshaw@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
        ];
        features = {
          "rpc" = [ "futures" ];
        };
        resolvedDefaultFeatures = [ "futures" "rpc" ];
      };
      "capnp-futures" = rec {
        crateName = "capnp-futures";
        version = "0.10.1";
        edition = "2015";
        sha256 = "0qdiqkp9mh4acpa0dqhpzv2gwf949rj3m85mgwl1rih6gvgbh1zs";
        authors = [
          "David Renshaw <drenshaw@gmail.com>"
        ];
        dependencies = [
          {
            name = "capnp";
            packageId = "capnp";
          }
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        devDependencies = [
          {
            name = "capnp";
            packageId = "capnp";
            features = [ "quickcheck" ];
          }
        ];
        
      };
      "capnp-rpc" = rec {
        crateName = "capnp-rpc";
        version = "0.10.0";
        edition = "2018";
        sha256 = "1j6xg7yays1hlm1045wviyn1642yvvi2p4kba26yk07a0kafr3jn";
        libName = "capnp_rpc";
        authors = [
          "David Renshaw <dwrenshaw@sandstorm.io>"
        ];
        dependencies = [
          {
            name = "capnp";
            packageId = "capnp";
            features = [ "rpc" ];
          }
          {
            name = "capnp-futures";
            packageId = "capnp-futures";
          }
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        buildDependencies = [
          {
            name = "capnpc";
            packageId = "capnpc";
          }
        ];
        
      };
      "capnpc" = rec {
        crateName = "capnpc";
        version = "0.10.2";
        edition = "2018";
        crateBin = [];
        sha256 = "1zxbmdkr0xfzkfq9p8zn7pp9jjq275qhr8fh9a0cc0ab37yfvbyj";
        authors = [
          "David Renshaw <dwrenshaw@gmail.com>"
        ];
        dependencies = [
          {
            name = "capnp";
            packageId = "capnp";
          }
        ];
        
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.61";
        edition = "2018";
        crateBin = [];
        sha256 = "0pcq3hidadsjl8hg66cyn3zyx0clfkj6nrf4bzkkhqim13gcnrzd";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "jobserver" ];
        };
      };
      "cexpr" = rec {
        crateName = "cexpr";
        version = "0.3.6";
        edition = "2015";
        sha256 = "07fdfj4ff2974y33yixrb657riq9zl9b9h9lr0h7ridhhvxvbrgw";
        authors = [
          "Jethro Beekman <jethro@jbeekman.nl>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
            features = [ "verbose-errors" ];
          }
        ];
        
      };
      "cfg-if 0.1.10" = rec {
        crateName = "cfg-if";
        version = "0.1.10";
        edition = "2018";
        sha256 = "08h80ihs74jcyp24cd75wwabygbbdgl05k6p5dmq8akbr78vv1a7";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cfg-if 1.0.0" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.19";
        edition = "2015";
        sha256 = "0wyfl6c00vhfl562spnfcna3zkw8jqvcp652m9iskhl8j26dc2k7";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
          "Brandon W Maister <quodlibetor@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            optional = true;
            target = { target, features }: target."windows";
            features = [ "std" "minwinbase" "minwindef" "timezoneapi" ];
          }
        ];
        features = {
          "clock" = [ "libc" "std" "winapi" ];
          "default" = [ "clock" "std" "oldtime" ];
          "oldtime" = [ "time" ];
          "unstable-locales" = [ "pure-rust-locales" "alloc" ];
          "wasmbind" = [ "wasm-bindgen" "js-sys" ];
        };
        resolvedDefaultFeatures = [ "clock" "default" "libc" "oldtime" "std" "time" "winapi" ];
      };
      "clang-sys" = rec {
        crateName = "clang-sys";
        version = "0.28.1";
        edition = "2015";
        sha256 = "0ls8zcqi5bmmrvrk3b6r1ym4wlivinbv590d2dvg2xn9f44mbpl1";
        authors = [
          "Kyle Mayes <kyle@mayeses.com>"
        ];
        dependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "libloading";
            packageId = "libloading";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        features = {
          "clang_3_6" = [ "gte_clang_3_6" ];
          "clang_3_7" = [ "gte_clang_3_6" "gte_clang_3_7" ];
          "clang_3_8" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" ];
          "clang_3_9" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" ];
          "clang_4_0" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" "gte_clang_4_0" ];
          "clang_5_0" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" "gte_clang_4_0" "gte_clang_5_0" ];
          "clang_6_0" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" "gte_clang_4_0" "gte_clang_5_0" "gte_clang_6_0" ];
          "clang_7_0" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" "gte_clang_4_0" "gte_clang_5_0" "gte_clang_6_0" "gte_clang_7_0" ];
          "clang_8_0" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" "gte_clang_4_0" "gte_clang_5_0" "gte_clang_6_0" "gte_clang_7_0" "gte_clang_8_0" ];
          "runtime" = [ "libloading" ];
        };
        resolvedDefaultFeatures = [ "clang_6_0" "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" "gte_clang_4_0" "gte_clang_5_0" "gte_clang_6_0" "libloading" "runtime" ];
      };
      "clap" = rec {
        crateName = "clap";
        version = "2.33.3";
        edition = "2015";
        sha256 = "00i065a58987k1sbzqmlz721rw521zcg08jmsh40gi3khp3qmr9p";
        authors = [
          "Kevin K. <kbknapp@gmail.com>"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
            optional = true;
            target = { target, features }: (!target."windows");
          }
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "strsim";
            packageId = "strsim 0.8.0";
            optional = true;
          }
          {
            name = "textwrap";
            packageId = "textwrap";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
            optional = true;
          }
        ];
        features = {
          "color" = [ "ansi_term" "atty" ];
          "default" = [ "suggestions" "color" "vec_map" ];
          "doc" = [ "yaml" ];
          "lints" = [ "clippy" ];
          "suggestions" = [ "strsim" ];
          "wrap_help" = [ "term_size" "textwrap/term_size" ];
          "yaml" = [ "yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "ansi_term" "atty" "color" "default" "strsim" "suggestions" "vec_map" ];
      };
      "cloudabi" = rec {
        crateName = "cloudabi";
        version = "0.0.3";
        edition = "2015";
        sha256 = "0kxcg83jlihy0phnd2g8c2c303px3l2p3pkjz357ll6llnd5pz6x";
        libPath = "cloudabi.rs";
        authors = [
          "Nuxi (https://nuxi.nl/) and contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
        ];
        features = {
          "default" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" "default" ];
      };
      "colored" = rec {
        crateName = "colored";
        version = "1.9.3";
        edition = "2015";
        sha256 = "0nbc1czs512h1k696y7glv1kjrb2b914zpxraic6q5fgv80wizzl";
        authors = [
          "Thomas Wickham <mackwic@gmail.com>"
        ];
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            usesDefaultFeatures = false;
            target = { target, features }: target."windows";
            features = [ "consoleapi" "processenv" "winbase" ];
          }
        ];
        features = {
        };
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1g3vp04qzmk6cpzrd19yci6a95m7ap6wy7wkwgiy2pjklklrfl14";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.7.0";
        edition = "2015";
        sha256 = "0wbias8f0m5kyn2pcksi0h58fdslams6nmf16w78fgn42dx4rljp";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1b5qfnnmg49sawwfsb0c0wbj81bqi7h7lh68pmhbidf0jjs1m9xk";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
        };
      };
      "cpuid-bool" = rec {
        crateName = "cpuid-bool";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0d16n378jl0n2dslspqxgsiw9frmjirdszhj5gfccgd0548wmswa";
        authors = [
          "RustCrypto Developers"
        ];
        
      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1c9dhkvf3brrzzplcijaywxi2w8wv5578i0ryhcm7x8dmzi5s4ms";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.7.3";
        edition = "2015";
        sha256 = "11c2c0x5grdba3ah3g94yn6b8s47xi8qwm85h8hq5vmf9nbsy0lz";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
        ];
        
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1knsf0zz7rgzxn0nwz5gajjcrivxpw3zrdcp946gdhdgr9sd53h5";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
          {
            name = "memoffset";
            packageId = "memoffset";
          }
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "alloc" = [ "crossbeam-utils/alloc" ];
          "default" = [ "std" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "crossbeam-utils/std" "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
      "crossbeam-queue" = rec {
        crateName = "crossbeam-queue";
        version = "0.2.3";
        edition = "2015";
        sha256 = "0w15z68nz3ac4f2s4djhwha8vmlwsh9dlfrmsl4x84y2ah5acjvp";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
        ];
        features = {
          "alloc" = [ "crossbeam-utils/alloc" ];
          "default" = [ "std" ];
          "std" = [ "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.7.2";
        edition = "2015";
        sha256 = "1a31wbrda1320gj2a6az1lin2d34xfc3xf88da4c17qy5lxcgiy3";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
      "crossterm" = rec {
        crateName = "crossterm";
        version = "0.13.3";
        edition = "2018";
        sha256 = "1jw9s85mnhpkk38lihr4ildip4jhfhc3h86npncd92i4mdb257vm";
        authors = [
          "T. Post"
        ];
        dependencies = [
          {
            name = "crossterm_winapi";
            packageId = "crossterm_winapi";
            target = { target, features }: target."windows";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "mio";
            packageId = "mio";
            optional = true;
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
          }
        ];
        features = {
          "cursor" = [ "lazy_static" "input" "winapi/wincon" "winapi/winnt" "winapi/minwindef" ];
          "default" = [ "cursor" "style" "terminal" "screen" "input" ];
          "input" = [ "mio" "lazy_static" "screen" "winapi/winnt" "winapi/winuser" ];
          "screen" = [ "lazy_static" "winapi/wincon" "winapi/minwindef" ];
          "style" = [ "lazy_static" "winapi/wincon" ];
          "terminal" = [ "cursor" ];
        };
        resolvedDefaultFeatures = [ "cursor" "default" "input" "lazy_static" "mio" "screen" "style" "terminal" ];
      };
      "crossterm_winapi" = rec {
        crateName = "crossterm_winapi";
        version = "0.4.0";
        edition = "2018";
        sha256 = "1j3av8bba3f5y4n4w1vgn0iz28vdajxrli6lqxnvpddbphskmph2";
        authors = [
          "T. Post"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "winbase" "consoleapi" "processenv" "handleapi" ];
          }
        ];
        
      };
      "csv" = rec {
        crateName = "csv";
        version = "1.1.3";
        edition = "2018";
        sha256 = "0yd2z55m2pg4al4yng4nl2y7c9dw2v7yhg5ynihxyrmmd9zzxbq0";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "bstr";
            packageId = "bstr";
            features = [ "serde1" ];
          }
          {
            name = "csv-core";
            packageId = "csv-core";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        
      };
      "csv-core" = rec {
        crateName = "csv-core";
        version = "0.1.10";
        edition = "2018";
        sha256 = "145wcc3560v1kmysqqspvddppiysr2rifqzy4nnlh3r6kxanc91b";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "libc" = [ "memchr/libc" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ctor" = rec {
        crateName = "ctor";
        version = "0.1.16";
        edition = "2018";
        sha256 = "11040byxccmjc8c83mhrp90y3a5bqvjkna8i4csm0c4m5knapfkz";
        procMacro = true;
        authors = [
          "Matt Mastracci <matthew@mastracci.com>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "proc-macro" ];
          }
        ];
        
      };
      "curve25519-dalek" = rec {
        crateName = "curve25519-dalek";
        version = "3.0.0";
        edition = "2015";
        sha256 = "01xknhlwagv601k6125372vr0lw2j6xjsvnnl74hprp943j2sjf8";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize/alloc" ];
          "avx2_backend" = [ "simd_backend" ];
          "default" = [ "std" "u64_backend" ];
          "nightly" = [ "subtle/nightly" ];
          "simd_backend" = [ "nightly" "u64_backend" "packed_simd" ];
          "std" = [ "alloc" "subtle/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "u64_backend" ];
      };
      "diff" = rec {
        crateName = "diff";
        version = "0.1.12";
        edition = "2015";
        sha256 = "16b40bhsa2qgvgvxs983l625pkxyp6m0mzmpwg2605cvj53yl98f";
        authors = [
          "Utkarsh Kukreti <utkarshkukreti@gmail.com>"
        ];
        
      };
      "difference" = rec {
        crateName = "difference";
        version = "2.0.0";
        edition = "2015";
        crateBin = [];
        sha256 = "1621wx4k8h452p6xzmzzvm7mz87kxh4yqz0kzxfjj9xmjxlbyk2j";
        authors = [
          "Johann Hofmann <mail@johann-hofmann.com>"
        ];
        features = {
          "bin" = [ "getopts" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "digest 0.8.1" = rec {
        crateName = "digest";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1madjl27f3kj5ql7kwgvb9c8b7yb7bv7yfgx7rqzj4i3fp4cil7k";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.12.3";
          }
        ];
        features = {
          "dev" = [ "blobby" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "digest 0.9.0" = rec {
        crateName = "digest";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0rmhvk33rgvd6ll71z8sng91a52rw14p0drjn1da0mqa138n1pfk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.4";
          }
        ];
        features = {
          "dev" = [ "blobby" ];
          "std" = [ "alloc" ];
        };
      };
      "dirs 1.0.5" = rec {
        crateName = "dirs";
        version = "1.0.5";
        edition = "2015";
        sha256 = "009rrhzj9pxyncmm2vhlj70npg0cgggv2hjbbkiwdl9vccq8kmrz";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "knownfolders" "objbase" "shlobj" "winbase" "winerror" ];
          }
        ];
        
      };
      "dirs 2.0.2" = rec {
        crateName = "dirs";
        version = "2.0.2";
        edition = "2015";
        sha256 = "1qymhyq7w7wlf1dirq6gsnabdyzg6yi2yyxkx6c4ldlkbjdaibhk";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "dirs-sys";
            packageId = "dirs-sys";
          }
        ];
        
      };
      "dirs-sys" = rec {
        crateName = "dirs-sys";
        version = "0.3.5";
        edition = "2015";
        sha256 = "0ym5843xack45b1yjahrh3q2f72shnwf1dd2jncf9qsxf3sxg4wf";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "knownfolders" "objbase" "shlobj" "winbase" "winerror" ];
          }
        ];
        
      };
      "doc-comment" = rec {
        crateName = "doc-comment";
        version = "0.3.3";
        edition = "2015";
        sha256 = "043sprsf3wl926zmck1bm7gw0jq50mb76lkpk49vasfr6ax1p97y";
        libName = "doc_comment";
        authors = [
          "Guillaume Gomez <guillaume1.gomez@gmail.com>"
        ];
        features = {
        };
      };
      "docopt" = rec {
        crateName = "docopt";
        version = "1.1.0";
        edition = "2018";
        crateBin = [];
        sha256 = "0s9rcpmnnivs502q69lc1h1wrwapkq09ikgbfbgqf31idmc5llkz";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "strsim";
            packageId = "strsim 0.9.3";
          }
        ];
        
      };
      "dyn-clone" = rec {
        crateName = "dyn-clone";
        version = "1.0.2";
        edition = "2018";
        sha256 = "10idzzq2sad7dhrfhrhcx7yckzj8il2bzr16204683ryclxdqlsc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        
      };
      "ed25519" = rec {
        crateName = "ed25519";
        version = "1.0.3";
        edition = "2018";
        sha256 = "1vxn7x1xinbv1cl31015m0fw08jwkphylxrll17animv9i9nmiip";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "signature";
            packageId = "signature";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "signature/std" ];
        };
      };
      "ed25519-dalek" = rec {
        crateName = "ed25519-dalek";
        version = "1.0.1";
        edition = "2018";
        sha256 = "17bsriciv93nkm39z22w7mr0h2a3hnbmgf378v4c895gvkkblqn7";
        authors = [
          "isis lovecruft <isis@patternsinthevoid.net>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
          }
          {
            name = "ed25519";
            packageId = "ed25519";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.1";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand";
          }
        ];
        features = {
          "alloc" = [ "curve25519-dalek/alloc" "rand/alloc" "zeroize/alloc" ];
          "asm" = [ "sha2/asm" ];
          "batch" = [ "merlin" "rand" ];
          "batch_deterministic" = [ "merlin" "rand" "rand_core" ];
          "default" = [ "std" "rand" "u64_backend" ];
          "nightly" = [ "curve25519-dalek/nightly" ];
          "serde" = [ "serde_crate" "serde_bytes" "ed25519/serde" ];
          "simd_backend" = [ "curve25519-dalek/simd_backend" ];
          "std" = [ "curve25519-dalek/std" "ed25519/std" "serde_crate/std" "sha2/std" "rand/std" ];
          "u32_backend" = [ "curve25519-dalek/u32_backend" ];
          "u64_backend" = [ "curve25519-dalek/u64_backend" ];
        };
        resolvedDefaultFeatures = [ "rand" "u64_backend" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.6.1";
        edition = "2015";
        sha256 = "0mwl9vngqf5jvrhmhn9x60kr5hivxyjxbmby2pybncxfqhf4z3g7";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "ena" = rec {
        crateName = "ena";
        version = "0.14.0";
        edition = "2015";
        sha256 = "1hrnkx2swbczn0jzpscxxipx7jcxhg6sf9vk911ff91wm6a2nh6p";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "congruence-closure" = [ "petgraph" ];
          "persistent" = [ "dogged" ];
        };
      };
      "encode_unicode" = rec {
        crateName = "encode_unicode";
        version = "0.3.6";
        edition = "2015";
        sha256 = "07w3vzrhxh9lpjgsg2y5bwzfar2aq35mdznvcp3zjl0ssj7d4mx3";
        authors = [
          "Torbjørn Birch Moltu <t.b.moltu@lyse.net>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "environment" = rec {
        crateName = "environment";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1vh32mcxf3z8xaibwv751zj14d08nh7iwk1vqdj90rkq17i18jqz";
        authors = [
          "Freyskeyd <simon.paitrault@gmail.com>"
        ];
        
      };
      "failure" = rec {
        crateName = "failure";
        version = "0.1.8";
        edition = "2015";
        sha256 = "11jg1wmbkijrs6bk9fqnbrm9zf0850whnqpgnxyswbn0dk8rnbnk";
        authors = [
          "Without Boats <boats@mozilla.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "failure_derive";
            packageId = "failure_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "derive" ];
          "derive" = [ "failure_derive" ];
          "std" = [ "backtrace" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "derive" "failure_derive" "std" ];
      };
      "failure_derive" = rec {
        crateName = "failure_derive";
        version = "0.1.8";
        edition = "2015";
        sha256 = "1936adqqk080439kx2bjf1bds7h89sg6wcif4jw0syndcv3s6kda";
        procMacro = true;
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        features = {
        };
      };
      "fake-simd" = rec {
        crateName = "fake-simd";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1vfylvk4va2ivqx85603lyqqp0zk52cgbs4n5nfbbbqx577qm2p8";
        authors = [
          "The Rust-Crypto Project Developers"
        ];
        
      };
      "fallible-iterator" = rec {
        crateName = "fallible-iterator";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1xq759lsr8gqss7hva42azn3whgrbrs2sd9xpn92c5ickxm1fhs4";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "fallible-streaming-iterator" = rec {
        crateName = "fallible-streaming-iterator";
        version = "0.1.9";
        edition = "2015";
        sha256 = "0nj6j26p71bjy8h42x6jahx1hn0ng6mc2miwpgwnp8vnwqf4jq3k";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        features = {
        };
      };
      "filetime" = rec {
        crateName = "filetime";
        version = "0.2.12";
        edition = "2018";
        sha256 = "17nginckcwgjm98l2ilhjfyd6s1pnai0db2hr6sl91n6vismgn1y";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "fileapi" "minwindef" "winbase" ];
          }
        ];
        
      };
      "fixedbitset" = rec {
        crateName = "fixedbitset";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0kg03p777wc0dajd9pvlcnsyrwa8dhqwf0sd9r4dw0p82rs39arp";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.0.18";
        edition = "2018";
        sha256 = "1vk0kyqzph4w9l3i2mij0snm8wlvvjy3b2sdlg6isrbjk9cbx06s";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."arch" == "wasm32") && (!(target."os" == "emscripten")));
          }
        ];
        features = {
          "cloudflare_zlib" = [ "any_zlib" "cloudflare-zlib-sys" ];
          "default" = [ "rust_backend" ];
          "rust_backend" = [ "miniz_oxide" ];
          "tokio" = [ "tokio-io" "futures" ];
          "zlib" = [ "any_zlib" "libz-sys" ];
          "zlib-ng-compat" = [ "zlib" "libz-sys/zlib-ng" ];
        };
        resolvedDefaultFeatures = [ "default" "miniz_oxide" "rust_backend" ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cgk0vyd7r45cj769jym4a6s7vwshvd0z4bqrb92q1fwibmkkwzn";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];
        
      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0jxgzd04ra4imjv8jgkmdq59kj8fsz6w4zxsbmlai34h26225c00";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        
      };
      "fs2" = rec {
        crateName = "fs2";
        version = "0.4.3";
        edition = "2015";
        sha256 = "04v2hwk7035c088f19mfl5b1lz84gnvv2hv6m935n0hmirszqr4m";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "handleapi" "processthreadsapi" "winerror" "fileapi" "winbase" "std" ];
          }
        ];
        
      };
      "fuchsia-zircon" = rec {
        crateName = "fuchsia-zircon";
        version = "0.3.3";
        edition = "2015";
        sha256 = "10jxc5ks1x06gpd0xg51kcjrxr35nj6qhx2zlc5n7bmskv3675rf";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "fuchsia-zircon-sys";
            packageId = "fuchsia-zircon-sys";
          }
        ];
        
      };
      "fuchsia-zircon-sys" = rec {
        crateName = "fuchsia-zircon-sys";
        version = "0.3.3";
        edition = "2015";
        sha256 = "19zp2085qsyq2bh1gvcxq1lb8w6v6jj9kbdkhpdjrl95fypakjix";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.1.30";
        edition = "2015";
        sha256 = "1v9f02g6wkn0241kdymfr42bf8b02mlhrknlzvw0ssvl28k4qzjc";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "use_std" "with-deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" "with-deprecated" ];
      };
      "futures-cpupool" = rec {
        crateName = "futures-cpupool";
        version = "0.1.8";
        edition = "2015";
        sha256 = "1r32456gpblzfvnkf60545v8acqk7gh5zhyhi1jn669k9gicv45b";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = [ "use_std" ];
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];
        features = {
          "default" = [ "with-deprecated" ];
          "with-deprecated" = [ "futures/with-deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" "with-deprecated" ];
      };
      "generic-array 0.12.3" = rec {
        crateName = "generic-array";
        version = "0.12.3";
        edition = "2015";
        sha256 = "1v5jg7djicq34nbiv1dwaki71gkny002wyy9qfn3y0hfmrs053y6";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        
      };
      "generic-array 0.14.4" = rec {
        crateName = "generic-array";
        version = "0.14.4";
        edition = "2015";
        sha256 = "05qqwm9v5asbil9z28wjkmpfvs1c5c99n8n9gwxis3d3r3n6c52h";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check 0.9.2";
          }
        ];
        features = {
        };
      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.1.15";
        edition = "2018";
        sha256 = "1rj7psnlrnmsgyj6x2ag4c6367laq4g8kfd6pzamac99xk07nn7w";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "wasi";
            packageId = "wasi 0.9.0+wasi-snapshot-preview1";
            target = { target, features }: (target."os" == "wasi");
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "compiler_builtins" "core" ];
          "test-in-browser" = [ "wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.22.0";
        edition = "2018";
        sha256 = "095pi71iv1mkpjsgh151gxg7g2576xpd8323z9kp7d3c2fpizyda";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "Philip Craig <philipjcraig@gmail.com>"
        ];
        features = {
          "default" = [ "read" "write" "std" "fallible-iterator" "endian-reader" ];
          "endian-reader" = [ "stable_deref_trait" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" ];
          "std" = [ "fallible-iterator/std" "stable_deref_trait/std" ];
          "write" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "read" ];
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0x25wfr7vg3mzxc9x05dcphvd3nwlcmbnxrvwcvrrdwplcrrk4cv";
        authors = [
          "The Rust Project Developers"
        ];
        
      };
      "h2" = rec {
        crateName = "h2";
        version = "0.1.26";
        edition = "2015";
        sha256 = "0qn457y8xh03p7c7cpk76r22gqpyqxc58g5022j3iya7d0j4rcx5";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "string";
            packageId = "string";
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
        ];
        features = {
        };
      };
      "hashbrown" = rec {
        crateName = "hashbrown";
        version = "0.9.1";
        edition = "2018";
        sha256 = "016dsm9s4xmxlkw2jfikm54qlz6vyk0qr280gab7kzp342jf9byp";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "default" = [ "ahash" "inline-more" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
        };
        resolvedDefaultFeatures = [ "ahash" "default" "inline-more" "raw" ];
      };
      "hashlink" = rec {
        crateName = "hashlink";
        version = "0.6.0";
        edition = "2018";
        sha256 = "1a2gi4737lmqq1i48b9w13gvbkh4g3gc7gj6d3974hywy21gg76r";
        authors = [
          "kyren <kerriganw@gmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown";
          }
        ];
        features = {
          "serde_impl" = [ "serde" ];
        };
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.3.1";
        edition = "2015";
        sha256 = "01a2v7yvkiqxakdqz4hw3w3g4sm52ivz9cs3qcsv2arxsmw4wmi0";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];
        
      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.1.17";
        edition = "2018";
        sha256 = "1s1ss7xypnbpjglmj5k39svzsmni1rqp57a91qi5pyv0yxjmbjjs";
        authors = [
          "Stefan Lankes"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins/rustc-dep-of-std" "libc/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "http" = rec {
        crateName = "http";
        version = "0.1.21";
        edition = "2015";
        sha256 = "1w21xnhd8f48zvbmm5njg2y1nb4p08ppn8r0cs2xi5d8wgnzbk6n";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
        
      };
      "http-body" = rec {
        crateName = "http-body";
        version = "0.1.0";
        edition = "2015";
        sha256 = "0b99404k4mw6a92hvyr0qwzkqv4f866ykg0x7913limjq5cwhhb7";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "tokio-buf";
            packageId = "tokio-buf";
            usesDefaultFeatures = false;
          }
        ];
        
      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.3.4";
        edition = "2015";
        sha256 = "1yf23ldnjwfkkhkca7f4w15mky9961gjz28dlwyybhphc7l9l5yd";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "hyper" = rec {
        crateName = "hyper";
        version = "0.12.35";
        edition = "2015";
        sha256 = "1xnm8zi4bdjqhlnx3238kx8yjf29jjd1ww54apcql7wf8g8nxglx";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-cpupool";
            packageId = "futures-cpupool";
            optional = true;
          }
          {
            name = "h2";
            packageId = "h2";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "net2";
            packageId = "net2";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rt-full" ];
          }
          {
            name = "tokio-buf";
            packageId = "tokio-buf";
          }
          {
            name = "tokio-executor";
            packageId = "tokio-executor";
            optional = true;
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
          {
            name = "tokio-reactor";
            packageId = "tokio-reactor";
            optional = true;
          }
          {
            name = "tokio-tcp";
            packageId = "tokio-tcp";
            optional = true;
          }
          {
            name = "tokio-threadpool";
            packageId = "tokio-threadpool";
            optional = true;
          }
          {
            name = "tokio-timer";
            packageId = "tokio-timer";
            optional = true;
          }
          {
            name = "want";
            packageId = "want";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "default" = [ "__internal_flaky_tests" "runtime" ];
          "runtime" = [ "futures-cpupool" "net2" "tokio" "tokio-executor" "tokio-reactor" "tokio-tcp" "tokio-threadpool" "tokio-timer" ];
        };
        resolvedDefaultFeatures = [ "__internal_flaky_tests" "default" "futures-cpupool" "net2" "runtime" "tokio" "tokio-executor" "tokio-reactor" "tokio-tcp" "tokio-threadpool" "tokio-timer" ];
      };
      "hyper-tls" = rec {
        crateName = "hyper-tls";
        version = "0.3.2";
        edition = "2015";
        sha256 = "0kqp4sz8613j6nv375wfj3gh95ff4nb6a3rb1f2vbx0almm0v01s";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hyper";
            packageId = "hyper";
          }
          {
            name = "native-tls";
            packageId = "native-tls";
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
        ];
        features = {
          "vendored" = [ "native-tls/vendored" ];
        };
      };
      "idna" = rec {
        crateName = "idna";
        version = "0.2.0";
        edition = "2015";
        sha256 = "1a9066imqpdrm1aavfasdyb1zahqaz8jmdcwdawvb1pf60y6gqh2";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
        ];
        
      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "1.6.0";
        edition = "2018";
        sha256 = "1wi8l3y2f3k4c2azaf3jm3pw2sksm90rzgv18x1a0lxacp3y9qjm";
        authors = [
          "bluss"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "serde-1" = [ "serde" ];
        };
      };
      "iovec" = rec {
        crateName = "iovec";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0ph73qygwx8i0mblrf110cj59l00gkmsgrpzz1rm85syz5pymcxj";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
        ];
        
      };
      "itertools" = rec {
        crateName = "itertools";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0jyml7ygr7kijkcjdl3fk5f34y5h5jsavclim7l13zjiavw1hkr8";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "0.4.6";
        edition = "2015";
        sha256 = "1rnpb7rr8df76gnlk07b9086cn7fc0dxxy1ghh00q6nip7bklvyw";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "kernel32-sys" = rec {
        crateName = "kernel32-sys";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1389av0601a9yz8dvx5zha9vmkd6ik7ax0idpb032d28555n41vm";
        libName = "kernel32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
      "lalrpop" = rec {
        crateName = "lalrpop";
        version = "0.19.1";
        edition = "2015";
        crateBin = [];
        sha256 = "1j52sybjhn82ydgsmnw7nkywjyb7pvg50mvyb48m7vdq3wcmdyv0";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "ascii-canvas";
            packageId = "ascii-canvas";
          }
          {
            name = "atty";
            packageId = "atty";
          }
          {
            name = "bit-set";
            packageId = "bit-set";
          }
          {
            name = "diff";
            packageId = "diff";
          }
          {
            name = "docopt";
            packageId = "docopt";
          }
          {
            name = "ena";
            packageId = "ena";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
          }
          {
            name = "petgraph";
            packageId = "petgraph";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "sha2";
            packageId = "sha2 0.8.2";
          }
          {
            name = "string_cache";
            packageId = "string_cache";
          }
          {
            name = "term";
            packageId = "term";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "lexer" = [ "lalrpop-util/lexer" ];
        };
      };
      "lalrpop-util" = rec {
        crateName = "lalrpop-util";
        version = "0.19.1";
        edition = "2015";
        sha256 = "0224r8gsbk8and96nhwgzdj4hc1c01g78zmvv3x4f5jnzwg1cwb7";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        features = {
          "lexer" = [ "regex" ];
        };
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "spin";
            packageId = "spin";
            optional = true;
          }
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
        resolvedDefaultFeatures = [ "spin" "spin_no_std" ];
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.79";
        edition = "2015";
        sha256 = "0hw7qnlymw5gi5c3xd7mirpgrc5l0pvqpjg9jb3vzqw0dq3gcj14";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libloading" = rec {
        crateName = "libloading";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0lyply8rcqc8agajzxs7bq6ivba9dnn1i68kgb9z2flnfjh13cgj";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "winerror" "errhandlingapi" "libloaderapi" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        
      };
      "libm" = rec {
        crateName = "libm";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0akh56sh51adhagmk9l84dyrlz60gv8ri05xhr13i1b18czkpmy7";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
          "musl-reference-tests" = [ "rand" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "libsqlite3-sys" = rec {
        crateName = "libsqlite3-sys";
        version = "0.20.1";
        edition = "2018";
        sha256 = "1g9gbjjpm9phhs991abkzmacszibp94m5nrh331ycd99y9ci1lv4";
        authors = [
          "The rusqlite developers"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            optional = true;
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
            optional = true;
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            optional = true;
            target = {target, features}: (target."env" == "msvc");
          }
        ];
        features = {
          "buildtime_bindgen" = [ "bindgen" "pkg-config" "vcpkg" ];
          "bundled" = [ "cc" "bundled_bindings" ];
          "bundled-windows" = [ "cc" "bundled_bindings" ];
          "default" = [ "min_sqlite_version_3_6_8" ];
          "min_sqlite_version_3_6_23" = [ "pkg-config" "vcpkg" ];
          "min_sqlite_version_3_6_8" = [ "pkg-config" "vcpkg" ];
          "min_sqlite_version_3_7_16" = [ "pkg-config" "vcpkg" ];
          "min_sqlite_version_3_7_7" = [ "pkg-config" "vcpkg" ];
          "preupdate_hook" = [ "buildtime_bindgen" ];
          "session" = [ "preupdate_hook" "buildtime_bindgen" ];
          "winsqlite3" = [ "min_sqlite_version_3_7_16" ];
        };
        resolvedDefaultFeatures = [ "bundled" "bundled_bindings" "cc" "default" "min_sqlite_version_3_6_8" "pkg-config" "vcpkg" ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.3.4";
        edition = "2018";
        sha256 = "0xgc5dzmajh0akbh5d6d7rj9mh5rzpk74pyrc946v2ixgakj9nn4";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        features = {
        };
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.11";
        edition = "2015";
        sha256 = "12xzqaflpiljn5cmxsbnbv9sjaj13ykhwsvll0gysbx4blbyvasg";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
        ];
        features = {
          "kv_unstable_sval" = [ "kv_unstable" "sval/fmt" ];
        };
      };
      "matches" = rec {
        crateName = "matches";
        version = "0.1.8";
        edition = "2015";
        sha256 = "020axl4q7rk9vz90phs7f8jas4imxal9y9kxl4z4v7a6719mrz3z";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        
      };
      "maybe-uninit" = rec {
        crateName = "maybe-uninit";
        version = "2.0.0";
        edition = "2015";
        sha256 = "004y0nzmpfdrhz251278341z6ql34iv1k6dp1h6af7d6nd6jwc30";
        authors = [
          "est31 <MTest31@outlook.com>"
          "The Rust Project Developers"
        ];
        
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.3.3";
        edition = "2015";
        sha256 = "0074pvsfl938ndl5js14ibc7i9q0k3zp390z843w8nlyv4bxha1p";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "use_std" ];
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.5.6";
        edition = "2015";
        sha256 = "1ahi51aa650s2p9ib1a4ifgqv0pzmsxlm9z4xdgvi9zdd7q7ac84";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "memsec" = rec {
        crateName = "memsec";
        version = "0.6.0";
        edition = "2018";
        sha256 = "1pfbpl75586bjdkphnaa4j58d668rl1wgcqzpnpzzx1phxfzkx1a";
        authors = [
          "quininer kel <quininer@live.com>"
        ];
        features = {
          "alloc" = [ "getrandom" "use_os" ];
          "default" = [ "use_os" "alloc" ];
          "use_os" = [ "libc" "winapi" ];
        };
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.4.3";
        edition = "2018";
        sha256 = "17d1xp29v5xgh4vahxld14w1c1hgh38qmxpv7i18wy096gn2cb8g";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler";
            packageId = "adler";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler/rustc-dep-of-std" ];
        };
      };
      "mio" = rec {
        crateName = "mio";
        version = "0.6.22";
        edition = "2015";
        sha256 = "0c64razhyam9892kgxsshmkqs6smrd11087nxb48nhjn4q4lgqzw";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "fuchsia-zircon";
            packageId = "fuchsia-zircon";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "fuchsia-zircon-sys";
            packageId = "fuchsia-zircon-sys";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
            target = { target, features }: target."windows";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "miow";
            packageId = "miow 0.2.1";
            target = { target, features }: target."windows";
          }
          {
            name = "net2";
            packageId = "net2";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
            target = { target, features }: target."windows";
          }
        ];
        features = {
          "default" = [ "with-deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" "with-deprecated" ];
      };
      "mio-named-pipes" = rec {
        crateName = "mio-named-pipes";
        version = "0.1.7";
        edition = "2018";
        sha256 = "0mjnjcg5dkb2jwxh4zxx4fgp15wr3hj9r53z4hdm4pnm1z2w2h08";
        authors = [
          "Brendan Molloy <brendan@bbqsrc.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            target = { target, features }: target."windows";
          }
          {
            name = "mio";
            packageId = "mio";
            target = { target, features }: target."windows";
          }
          {
            name = "miow";
            packageId = "miow 0.3.5";
            target = { target, features }: target."windows";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "winerror" "ioapiset" "minwinbase" "winbase" ];
          }
        ];
        
      };
      "mio-uds" = rec {
        crateName = "mio-uds";
        version = "0.6.8";
        edition = "2015";
        sha256 = "1w36w09gd8as1mah80wdy0kgpshmphmljj68gij34hvdnag6kjxg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "iovec";
            packageId = "iovec";
            target = { target, features }: target."unix";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "mio";
            packageId = "mio";
            target = { target, features }: target."unix";
          }
        ];
        
      };
      "miow 0.2.1" = rec {
        crateName = "miow";
        version = "0.2.1";
        edition = "2015";
        sha256 = "06g9b8sqlh5gxakwqq4rrib07afwanfnxgxajrldwcgk3hxjy7wc";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
          }
          {
            name = "net2";
            packageId = "net2";
            usesDefaultFeatures = false;
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
          {
            name = "ws2_32-sys";
            packageId = "ws2_32-sys";
          }
        ];
        
      };
      "miow 0.3.5" = rec {
        crateName = "miow";
        version = "0.3.5";
        edition = "2018";
        sha256 = "17lpb2754vg6vflk2vgka4kz2p4gkbsgnb815bb3ckaxg6wqzf07";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "socket2";
            packageId = "socket2";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            features = [ "std" "fileapi" "handleapi" "ioapiset" "minwindef" "namedpipeapi" "ntdef" "synchapi" "winerror" "winsock2" "ws2def" "ws2ipdef" ];
          }
        ];
        
      };
      "native-tls" = rec {
        crateName = "native-tls";
        version = "0.2.4";
        edition = "2015";
        sha256 = "0bcbqm8gpm5azlp8rwznhrfk3ngikr041fj883lmw3g9dz08h39b";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!((target."os" == "windows") || (target."os" == "macos") || (target."os" == "ios")));
          }
          {
            name = "openssl";
            packageId = "openssl";
            target = { target, features }: (!((target."os" == "windows") || (target."os" == "macos") || (target."os" == "ios")));
          }
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: (!((target."os" == "windows") || (target."os" == "macos") || (target."os" == "ios")));
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            target = { target, features }: (!((target."os" == "windows") || (target."os" == "macos") || (target."os" == "ios")));
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
        ];
        features = {
          "vendored" = [ "openssl/vendored" ];
        };
      };
      "net2" = rec {
        crateName = "net2";
        version = "0.2.35";
        edition = "2015";
        sha256 = "0lv83nx533k3y2sggfnqam3gcsg2vq47iilnaljrlz7djb33xg1y";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."os" == "redox") || target."unix" || (target."os" == "wasi"));
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "handleapi" "winsock2" "ws2def" "ws2ipdef" "ws2tcpip" ];
          }
        ];
        features = {
          "default" = [ "duration" ];
        };
        resolvedDefaultFeatures = [ "default" "duration" ];
      };
      "nettle" = rec {
        crateName = "nettle";
        version = "7.0.0";
        edition = "2018";
        sha256 = "1n6dwy9zba8853bmxzhwaashd3np0wxpx0pj43brm0hb8n2sxbxi";
        authors = [
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Justus Winter <justus@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "nettle-sys";
            packageId = "nettle-sys";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "vendored" = [ "nettle-sys/vendored" ];
        };
        resolvedDefaultFeatures = [ "vendored" ];
      };
      "nettle-src" = rec {
        crateName = "nettle-src";
        version = "3.5.1-2";
        edition = "2018";
        sha256 = "1j20nv9qyww9bjrxhgaj5a2dvc6ly44z040c2y90x213pvac1lzs";
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        
      };
      "nettle-sys" = rec {
        crateName = "nettle-sys";
        version = "2.0.4";
        edition = "2015";
        sha256 = "1yq1w6dlcmg89x529i7s20j29afdhgim7qnsa7978fszzwrr6qmq";
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
        ];
        buildDependencies = [
          {
            name = "bindgen";
            packageId = "bindgen";
            usesDefaultFeatures = false;
          }
          {
            name = "nettle-src";
            packageId = "nettle-src";
            optional = true;
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "vendored" = [ "nettle-src" ];
        };
        resolvedDefaultFeatures = [ "nettle-src" "vendored" ];
      };
      "new_debug_unreachable" = rec {
        crateName = "new_debug_unreachable";
        version = "1.0.4";
        edition = "2018";
        sha256 = "0m1bg3wz3nvxdryg78x4i8hh9fys4wp2bi0zg821dhvf44v4g8p4";
        libName = "debug_unreachable";
        authors = [
          "Matt Brubeck <mbrubeck@limpet.net>"
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        
      };
      "nom" = rec {
        crateName = "nom";
        version = "4.2.3";
        edition = "2015";
        sha256 = "1mkvby8b4m61p4g1px0pwr58yfkphyp1jcfbp4qfp7l6iqdaklia";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check 0.1.5";
          }
        ];
        features = {
          "default" = [ "std" ];
          "regexp" = [ "regex" ];
          "regexp_macros" = [ "regexp" "lazy_static" ];
          "std" = [ "alloc" "memchr/use_std" ];
          "verbose-errors" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "verbose-errors" ];
      };
      "num-bigint-dig" = rec {
        crateName = "num-bigint-dig";
        version = "0.6.0";
        edition = "2015";
        sha256 = "1aljx3bxfnzq35i9pkbqkj0d0hc1wjc2dd60wccjqylz1wrkrl5k";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            usesDefaultFeatures = false;
            features = [ "spin_no_std" ];
          }
          {
            name = "libm";
            packageId = "libm";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-iter";
            packageId = "num-iter";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.4.2";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 0.1.7";
          }
        ];
        features = {
          "default" = [ "std" "i128" "u64_digit" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "nightly" = [ "rand/nightly" ];
          "prime" = [ "rand" ];
          "std" = [ "num-integer/std" "num-traits/std" "smallvec/write" "rand/std" "serde/std" ];
        };
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.43";
        edition = "2015";
        sha256 = "0nw79ynfvw8br6yncv27pw65y2vw2z7m3kv9g2hinm1dcrz4ancd";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
      };
      "num-iter" = rec {
        crateName = "num-iter";
        version = "0.1.41";
        edition = "2015";
        sha256 = "17sb142lhmpsq17cf9wrffjh8vjk901axxf55565r6cgfiy6nvks";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.12";
        edition = "2015";
        sha256 = "04fnzwlnn6fcy09jjbi9l7bj5dvg657x5c2sjgwfb3pl0z67n9mc";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.13.0";
        edition = "2015";
        sha256 = "1cv6yxhz2zbnwn8pn1yn8grg7zsnd523947fby41a737aqvryj85";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (((target."arch" == "x86_64") || (target."arch" == "aarch64")) && (target."os" == "hermit"));
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "object" = rec {
        crateName = "object";
        version = "0.21.1";
        edition = "2018";
        sha256 = "14qnql8l2bgj2pnh0fa9hcjzgzsgpwfx1cxhaa535kmjzq251z9p";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "Philip Craig <philipjcraig@gmail.com>"
        ];
        features = {
          "all" = [ "read" "write" "std" "compression" "default" ];
          "compression" = [ "flate2" "std" ];
          "default" = [ "read" "compression" ];
          "pe" = [ "coff" ];
          "read" = [ "read_core" "coff" "elf" "macho" "pe" "wasm" "unaligned" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "alloc" ];
          "wasm" = [ "wasmparser" ];
          "write" = [ "write_core" "coff" "elf" "macho" ];
          "write_core" = [ "crc32fast" "indexmap" "std" ];
        };
        resolvedDefaultFeatures = [ "coff" "elf" "macho" "pe" "read_core" "unaligned" ];
      };
      "opaque-debug 0.2.3" = rec {
        crateName = "opaque-debug";
        version = "0.2.3";
        edition = "2015";
        sha256 = "172j6bs8ndclqxa2m64qc0y1772rr73g4l9fg2svscgicnbfff98";
        authors = [
          "RustCrypto Developers"
        ];
        
      };
      "opaque-debug 0.3.0" = rec {
        crateName = "opaque-debug";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1m8kzi4nd6shdqimn0mgb24f0hxslhnqd1whakyq06wcqd086jk2";
        authors = [
          "RustCrypto Developers"
        ];
        
      };
      "openssl" = rec {
        crateName = "openssl";
        version = "0.10.30";
        edition = "2015";
        sha256 = "1d5wwajanjw1q5d2y23yaq8rvbaqb20z53v7hfdryhb56vzmwmwd";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
          }
        ];
        features = {
          "vendored" = [ "openssl-sys/vendored" ];
        };
      };
      "openssl-probe" = rec {
        crateName = "openssl-probe";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1pijrdifgsdwd45b08c2g0dsmnhz7c3kmagb70839ngrd7d29bvp";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "openssl-sys" = rec {
        crateName = "openssl-sys";
        version = "0.9.58";
        edition = "2015";
        sha256 = "1pkq3x8w16kqvkg75g4w7nny56w9clssww0ibpzg015n153xnhm8";
        build = "build/main.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            target = {target, features}: (target."env" == "msvc");
          }
        ];
        features = {
          "vendored" = [ "openssl-src" ];
        };
      };
      "parity-tokio-ipc" = rec {
        crateName = "parity-tokio-ipc";
        version = "0.4.0";
        edition = "2018";
        sha256 = "1gzifrrpiw78p6dq9ax64vhffc4h6mwg6jazpfgkz8zy0jjzwmqy";
        authors = [
          "NikVolf <nikvolf@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mio-named-pipes";
            packageId = "mio-named-pipes";
          }
          {
            name = "miow";
            packageId = "miow 0.3.5";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-named-pipes";
            packageId = "tokio-named-pipes";
          }
          {
            name = "tokio-uds";
            packageId = "tokio-uds";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "winbase" "winnt" "accctrl" "aclapi" "securitybaseapi" "minwinbase" "winbase" ];
          }
        ];
        
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0lk2vq3hp88ygpgsrypdr3ss71fidnqbykva0csgxhmn5scb2hpq";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.6.2";
        edition = "2018";
        sha256 = "0ay67dpnrn68ryyvp720m9i8hzp189fd4d6slrs1lvmcwywv2xmq";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
        };
      };
      "peeking_take_while" = rec {
        crateName = "peeking_take_while";
        version = "0.1.2";
        edition = "2015";
        sha256 = "16bhqr6rdyrp12zv381cxaaqqd0pwysvm1q8h2ygihvypvfprc8r";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.1.0";
        edition = "2015";
        sha256 = "0bp3zrsk3kr47fbpipyczidbbx4g54lzxdm77ni1i3qws10mdzfl";
        libPath = "lib.rs";
        authors = [
          "The rust-url developers"
        ];
        
      };
      "petgraph" = rec {
        crateName = "petgraph";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1dzxda6z17sfxly11m8ja3iargh73pw0s1sdgjyp0qp5dm51cza6";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset";
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
        ];
        features = {
          "all" = [ "unstable" "quickcheck" "matrix_graph" "stable_graph" "graphmap" ];
          "default" = [ "graphmap" "stable_graph" "matrix_graph" ];
          "serde-1" = [ "serde" "serde_derive" ];
          "unstable" = [ "generate" ];
        };
        resolvedDefaultFeatures = [ "default" "graphmap" "matrix_graph" "stable_graph" ];
      };
      "phf_shared" = rec {
        crateName = "phf_shared";
        version = "0.8.0";
        edition = "2018";
        sha256 = "1xssnqrrcn0nr9ayqrnm8xm37ac4xvwcx8pax7jxss7yxawzh360";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.19";
        edition = "2015";
        sha256 = "0k4860955riciibxr8bhnklp79jydp4xfylwdn5v9kj96hxlac9q";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.9";
        edition = "2018";
        sha256 = "080sa1pllwljxyl3i5b1i7746sh1s16m8lmn6fkn4p0z253sjvy3";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "precomputed-hash" = rec {
        crateName = "precomputed-hash";
        version = "0.1.1";
        edition = "2015";
        sha256 = "075k9bfy39jhs53cb2fpb9klfakx2glxnf28zdw08ws6lgpq6lwj";
        authors = [
          "Emilio Cobos Álvarez <emilio@crisal.io>"
        ];
        
      };
      "prettytable-rs" = rec {
        crateName = "prettytable-rs";
        version = "0.8.0";
        edition = "2015";
        crateBin = [];
        sha256 = "0bmcsxkcy94hi0jz5db0fz137w5aaf17z2j1ryn2vyh400blpl0g";
        libName = "prettytable";
        authors = [
          "Pierre-Henri Symoneaux"
        ];
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
          }
          {
            name = "csv";
            packageId = "csv";
            optional = true;
          }
          {
            name = "encode_unicode";
            packageId = "encode_unicode";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "term";
            packageId = "term";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "default" = [ "win_crlf" "csv" ];
        };
        resolvedDefaultFeatures = [ "csv" "default" "win_crlf" ];
      };
      "proc-macro-error" = rec {
        crateName = "proc-macro-error";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1373bhxaf0pagd8zkyd03kkx6bchzf6g0dkwrwzsnal9z47lj9fs";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr";
            packageId = "proc-macro-error-attr";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check 0.9.2";
          }
        ];
        features = {
          "default" = [ "syn-error" ];
          "syn-error" = [ "syn" ];
        };
        resolvedDefaultFeatures = [ "default" "syn" "syn-error" ];
      };
      "proc-macro-error-attr" = rec {
        crateName = "proc-macro-error-attr";
        version = "1.0.4";
        edition = "2018";
        sha256 = "0sgq6m5jfmasmwwy8x4mjygx5l7kp8s4j60bv25ckv2j1qc41gm1";
        procMacro = true;
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check 0.9.2";
          }
        ];
        
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.24";
        edition = "2018";
        sha256 = "0wcabxzrddcjmryndw8fpyxcq6rw63m701vx86xxf03y3bp081qy";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quickcheck" = rec {
        crateName = "quickcheck";
        version = "0.9.2";
        edition = "2018";
        sha256 = "0pwl7j21wmf843kpa9gr0byb40hg975ghjrwp0yxcym99bkq6j54";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "default" = [ "regex" "use_logging" ];
          "regex" = [ "env_logger/regex" ];
          "use_logging" = [ "log" "env_logger" ];
        };
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.7";
        edition = "2018";
        sha256 = "0drzd6pq7whq7qhdvvs8wn6pbb0hhc12pz8wv80fb05ixhbksmma";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand" = rec {
        crateName = "rand";
        version = "0.7.3";
        edition = "2018";
        sha256 = "00sdaimkbz491qgi6qxkv582yivl32m2jd401kzbn94vsiwicsva";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            rename = "getrandom_package";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."os" == "emscripten"));
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc";
            target = { target, features }: (target."os" == "emscripten");
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "getrandom" = [ "getrandom_package" "rand_core/getrandom" ];
          "nightly" = [ "simd_support" ];
          "simd_support" = [ "packed_simd" ];
          "small_rng" = [ "rand_pcg" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "stdweb" = [ "getrandom_package/stdweb" ];
          "wasm-bindgen" = [ "getrandom_package/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "getrandom_package" "libc" "std" ];
      };
      "rand_chacha" = rec {
        crateName = "rand_chacha";
        version = "0.2.2";
        edition = "2018";
        sha256 = "00il36fkdbsmpr99p9ksmmp6dn1md7rmnwmz0rr77jbrca2yvj7l";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "default" = [ "std" "simd" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core" = rec {
        crateName = "rand_core";
        version = "0.5.1";
        edition = "2018";
        sha256 = "06bdvx08v3rkz451cm7z59xwwqn1rkfh6v9ay77b14f8dwlybgch";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
        ];
        features = {
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_hc" = rec {
        crateName = "rand_hc";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0g31sqwpmsirdlwr0svnacr4dbqyz339im4ssl9738cjgfpjjcfa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.1.57";
        edition = "2015";
        sha256 = "1kh59fpwy33w9nwd5iyc283yglq8pf2s41hnhvl48iax9mz0zk21";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        
      };
      "redox_users" = rec {
        crateName = "redox_users";
        version = "0.3.5";
        edition = "2015";
        sha256 = "179fxmyqaqzibp533ajgbn4ljah9lrzpqvd3i73h55bs7qrkf1yy";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
          }
          {
            name = "rust-argon2";
            packageId = "rust-argon2";
            optional = true;
          }
        ];
        features = {
          "auth" = [ "rust-argon2" ];
          "default" = [ "auth" ];
        };
        resolvedDefaultFeatures = [ "auth" "default" "rust-argon2" ];
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.4.1";
        edition = "2015";
        sha256 = "02w2xvrpjrn5mxix7j3x6qpwx0zdvnqb8hyyzzn4y1z3iidvhqw9";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            usesDefaultFeatures = false;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-inline" "perf-literal" ];
          "perf-cache" = [ "thread_local" ];
          "perf-literal" = [ "aho-corasick" "memchr" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "aho-corasick" "default" "memchr" "perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "std" "thread_local" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-automata" = rec {
        crateName = "regex-automata";
        version = "0.1.9";
        edition = "2015";
        sha256 = "1r3aqa9c0s9sfrmd2w0mli16ldjzbar0rzb1x7srfjkasrqys7df";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "regex-syntax" ];
          "transducer" = [ "std" "fst" ];
        };
      };
      "regex-syntax" = rec {
        crateName = "regex-syntax";
        version = "0.6.20";
        edition = "2015";
        sha256 = "076irs10yk2nlw7iyq0s7s22mqn4sfi6cxr60pjy3k8m9lv7mawc";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "remove_dir_all" = rec {
        crateName = "remove_dir_all";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1rzqbsgkmr053bxxl04vmvsd1njyz0nxvly97aip6aa2cmb15k9s";
        authors = [
          "Aaronepower <theaaronepower@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "std" "errhandlingapi" "winerror" "fileapi" "winbase" ];
          }
        ];
        
      };
      "rpassword" = rec {
        crateName = "rpassword";
        version = "5.0.0";
        edition = "2015";
        sha256 = "1j96nc3dmqhxwb4ql50r5xjs0imwr2x6mrj02mj9i7grq1zj6mfp";
        authors = [
          "Conrad Kleinespel <conradk@conradk.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "std" "winnt" "fileapi" "processenv" "winbase" "handleapi" "consoleapi" "minwindef" "wincon" ];
          }
        ];
        
      };
      "rusqlite" = rec {
        crateName = "rusqlite";
        version = "0.24.1";
        edition = "2018";
        sha256 = "0s5svm32zl1qqmln8ww8g6ziwg5mi2k88si1a5zj25smmf8lfgby";
        authors = [
          "The rusqlite developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "fallible-iterator";
            packageId = "fallible-iterator";
          }
          {
            name = "fallible-streaming-iterator";
            packageId = "fallible-streaming-iterator";
          }
          {
            name = "hashlink";
            packageId = "hashlink";
          }
          {
            name = "libsqlite3-sys";
            packageId = "libsqlite3-sys";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.4.2";
          }
        ];
        features = {
          "array" = [ "vtab" ];
          "backup" = [ "libsqlite3-sys/min_sqlite_version_3_6_23" ];
          "blob" = [ "libsqlite3-sys/min_sqlite_version_3_7_7" ];
          "buildtime_bindgen" = [ "libsqlite3-sys/buildtime_bindgen" ];
          "bundled" = [ "libsqlite3-sys/bundled" "modern_sqlite" ];
          "bundled-full" = [ "array" "backup" "blob" "bundled" "chrono" "collation" "column_decltype" "csvtab" "extra_check" "functions" "hooks" "i128_blob" "limits" "load_extension" "serde_json" "series" "trace" "unlock_notify" "url" "uuid" "vtab" "window" ];
          "bundled-windows" = [ "libsqlite3-sys/bundled-windows" ];
          "csvtab" = [ "csv" "vtab" ];
          "functions" = [ "libsqlite3-sys/min_sqlite_version_3_7_7" ];
          "i128_blob" = [ "byteorder" ];
          "in_gecko" = [ "modern_sqlite" "libsqlite3-sys/in_gecko" ];
          "modern_sqlite" = [ "libsqlite3-sys/bundled_bindings" ];
          "series" = [ "vtab" ];
          "session" = [ "libsqlite3-sys/session" "hooks" ];
          "sqlcipher" = [ "libsqlite3-sys/sqlcipher" ];
          "trace" = [ "libsqlite3-sys/min_sqlite_version_3_6_23" ];
          "unlock_notify" = [ "libsqlite3-sys/unlock_notify" ];
          "vtab" = [ "libsqlite3-sys/min_sqlite_version_3_7_7" "lazy_static" ];
          "wasm32-wasi-vfs" = [ "libsqlite3-sys/wasm32-wasi-vfs" ];
          "window" = [ "functions" ];
          "winsqlite3" = [ "libsqlite3-sys/winsqlite3" ];
          "with-asan" = [ "libsqlite3-sys/with-asan" ];
        };
        resolvedDefaultFeatures = [ "bundled" "modern_sqlite" ];
      };
      "rust-argon2" = rec {
        crateName = "rust-argon2";
        version = "0.8.2";
        edition = "2018";
        sha256 = "069syiy3ncg9yai58p3dalwvgpr1aqisqls0x1sk54vm0wjn3awx";
        libName = "argon2";
        authors = [
          "Martijn Rijkeboer <mrr@sru-systems.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.12.3";
          }
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            optional = true;
          }
        ];
        features = {
          "default" = [ "crossbeam-utils" ];
        };
        resolvedDefaultFeatures = [ "crossbeam-utils" "default" ];
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.17";
        edition = "2015";
        sha256 = "02sgyqvfxvyslmdg1wai39hfc5wn4r89jj1vzxywh61xcizhnqdj";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc-hash" = rec {
        crateName = "rustc-hash";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1qkc5khrmv5pqi5l5ca9p5nl5hs742cagrndhbrlk3dhlrx3zm08";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.2.3";
        edition = "2015";
        sha256 = "02h3x57lcr8l2pm0a645s9whdh33pn5cnrwvn5cb57vcrc53x3hk";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];
        
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.5";
        edition = "2018";
        sha256 = "0vpqv1dj7fksa6hm3zpk5rbsjs0ifbfy7xwzsyyil0rx37a03lvi";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
        };
      };
      "schannel" = rec {
        crateName = "schannel";
        version = "0.1.19";
        edition = "2015";
        sha256 = "0xdwr3clrylywpv2r5hw7mrxmsf7ljagwiymw2z60ki3kihbl1cg";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Steffen Butzer <steffen.butzer@outlook.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            features = [ "lmcons" "minschannel" "securitybaseapi" "schannel" "sspi" "sysinfoapi" "timezoneapi" "winbase" "wincrypt" "winerror" ];
          }
        ];
        
      };
      "scoped-tls" = rec {
        crateName = "scoped-tls";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0a2bn9d2mb07c6l16sadijy4p540g498zddfxyiq4rsqpwrglbrk";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
        };
      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1kbqm85v43rq92vx7hfiay6pmcga03vrjbbfwqpyj3pwsg3b16nj";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "security-framework" = rec {
        crateName = "security-framework";
        version = "0.4.4";
        edition = "2015";
        sha256 = "0dg504y0ys27qksdcnn8qcyvrfhkjx8f5d6jvpm7i7yrsw18k034";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" "security-framework-sys/OSX_10_10" ];
          "OSX_10_11" = [ "OSX_10_10" "security-framework-sys/OSX_10_11" ];
          "OSX_10_12" = [ "OSX_10_11" "security-framework-sys/OSX_10_12" ];
          "OSX_10_13" = [ "OSX_10_12" "security-framework-sys/OSX_10_13" "alpn" "session-tickets" ];
          "OSX_10_9" = [ "security-framework-sys/OSX_10_9" ];
        };
      };
      "security-framework-sys" = rec {
        crateName = "security-framework-sys";
        version = "0.4.3";
        edition = "2015";
        sha256 = "01c4fkj78frz6kz9vri1am2pbkz52raxws5lbrli5xajjbci3gqp";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" ];
          "OSX_10_11" = [ "OSX_10_10" ];
          "OSX_10_12" = [ "OSX_10_11" ];
          "OSX_10_13" = [ "OSX_10_12" ];
        };
      };
      "semver" = rec {
        crateName = "semver";
        version = "0.9.0";
        edition = "2015";
        sha256 = "00q4lkcj0rrgbhviv9sd4p6qmdsipkwkbra7rh11jrhq5kpvjzhx";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "semver-parser";
            packageId = "semver-parser";
          }
        ];
        features = {
          "ci" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "semver-parser" = rec {
        crateName = "semver-parser";
        version = "0.7.0";
        edition = "2015";
        sha256 = "18vhypw6zgccnrlm5ps1pwa0khz7ry927iznpr88b87cagr1v2iq";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
        ];
        
      };
      "sequoia-autocrypt" = rec {
        crateName = "sequoia-autocrypt";
        version = "0.20.0";
        edition = "2018";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./autocrypt; };
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.13.0";
          }
          {
            name = "sequoia-openpgp";
            packageId = "sequoia-openpgp";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compression" = [ "sequoia-openpgp/compression" ];
          "compression-bzip2" = [ "sequoia-openpgp/compression-bzip2" ];
          "compression-deflate" = [ "sequoia-openpgp/compression-deflate" ];
          "crypto-cng" = [ "sequoia-openpgp/crypto-cng" ];
          "crypto-nettle" = [ "sequoia-openpgp/crypto-nettle" ];
          "default" = [ "sequoia-openpgp/default" ];
        };
        resolvedDefaultFeatures = [ "compression" "compression-bzip2" "compression-deflate" "crypto-cng" "crypto-nettle" "default" ];
      };
      "sequoia-core" = rec {
        crateName = "sequoia-core";
        version = "0.20.0";
        edition = "2018";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./core; };
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "dirs";
            packageId = "dirs 2.0.2";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        
      };
      "sequoia-ffi" = rec {
        crateName = "sequoia-ffi";
        version = "0.20.0";
        edition = "2018";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./ffi; };type = [ "cdylib" "staticlib" ];
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "memsec";
            packageId = "memsec";
            usesDefaultFeatures = false;
          }
          {
            name = "native-tls";
            packageId = "native-tls";
          }
          {
            name = "sequoia-core";
            packageId = "sequoia-core";
          }
          {
            name = "sequoia-ffi-macros";
            packageId = "sequoia-ffi-macros";
          }
          {
            name = "sequoia-net";
            packageId = "sequoia-net";
            usesDefaultFeatures = false;
          }
          {
            name = "sequoia-openpgp";
            packageId = "sequoia-openpgp";
            usesDefaultFeatures = false;
          }
          {
            name = "sequoia-store";
            packageId = "sequoia-store";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio-core";
            packageId = "tokio-core";
          }
        ];
        devDependencies = [
          {
            name = "filetime";
            packageId = "filetime";
          }
        ];
        features = {
          "background-services" = [ "sequoia-store/background-services" ];
          "compression" = [ "sequoia-openpgp/compression" ];
          "compression-bzip2" = [ "sequoia-openpgp/compression-bzip2" ];
          "compression-deflate" = [ "sequoia-openpgp/compression-deflate" ];
          "crypto-cng" = [ "sequoia-openpgp/crypto-cng" ];
          "crypto-nettle" = [ "sequoia-openpgp/crypto-nettle" ];
          "default" = [ "sequoia-openpgp/default" "sequoia-store/default" ];
        };
        resolvedDefaultFeatures = [ "background-services" "compression" "compression-bzip2" "compression-deflate" "crypto-cng" "crypto-nettle" "default" ];
      };
      "sequoia-ffi-macros" = rec {
        crateName = "sequoia-ffi-macros";
        version = "0.20.0";
        edition = "2018";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./ffi-macros; };
        procMacro = true;
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "sha2";
            packageId = "sha2 0.8.2";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        
      };
      "sequoia-guide" = rec {
        crateName = "sequoia-guide";
        version = "0.20.0";
        edition = "2015";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./guide; };
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "sequoia-openpgp";
            packageId = "sequoia-openpgp";
          }
        ];
        
      };
      "sequoia-ipc" = rec {
        crateName = "sequoia-ipc";
        version = "0.20.0";
        edition = "2018";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./ipc; };
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "buffered-reader";
            packageId = "buffered-reader";
            usesDefaultFeatures = false;
          }
          {
            name = "capnp-rpc";
            packageId = "capnp-rpc";
          }
          {
            name = "ctor";
            packageId = "ctor";
            target = { target, features }: target."windows";
          }
          {
            name = "fs2";
            packageId = "fs2";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "memsec";
            packageId = "memsec";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-tokio-ipc";
            packageId = "parity-tokio-ipc";
          }
          {
            name = "rand";
            packageId = "rand";
            usesDefaultFeatures = false;
          }
          {
            name = "sequoia-core";
            packageId = "sequoia-core";
          }
          {
            name = "sequoia-openpgp";
            packageId = "sequoia-openpgp";
            usesDefaultFeatures = false;
          }
          {
            name = "socket2";
            packageId = "socket2";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-core";
            packageId = "tokio-core";
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            usesDefaultFeatures = false;
            target = { target, features }: target."windows";
            features = [ "winsock2" ];
          }
        ];
        buildDependencies = [
          {
            name = "lalrpop";
            packageId = "lalrpop";
          }
        ];
        devDependencies = [
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "quickcheck";
            packageId = "quickcheck";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compression" = [ "sequoia-openpgp/compression" ];
          "compression-bzip2" = [ "sequoia-openpgp/compression-bzip2" ];
          "compression-deflate" = [ "sequoia-openpgp/compression-deflate" ];
          "crypto-cng" = [ "sequoia-openpgp/crypto-cng" ];
          "crypto-nettle" = [ "sequoia-openpgp/crypto-nettle" ];
          "default" = [ "sequoia-openpgp/default" ];
        };
        resolvedDefaultFeatures = [ "compression" "compression-bzip2" "compression-deflate" "crypto-cng" "crypto-nettle" "default" ];
      };
      "sequoia-net" = rec {
        crateName = "sequoia-net";
        version = "0.20.0";
        edition = "2018";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./net; };
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "hyper";
            packageId = "hyper";
          }
          {
            name = "hyper-tls";
            packageId = "hyper-tls";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "native-tls";
            packageId = "native-tls";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "sequoia-core";
            packageId = "sequoia-core";
          }
          {
            name = "sequoia-openpgp";
            packageId = "sequoia-openpgp";
            usesDefaultFeatures = false;
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio-core";
            packageId = "tokio-core";
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "zbase32";
            packageId = "zbase32";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compression" = [ "compression-deflate" "compression-bzip2" ];
          "compression-bzip2" = [ "sequoia-openpgp/compression-bzip2" ];
          "compression-deflate" = [ "sequoia-openpgp/compression-deflate" ];
          "default" = [ "compression" ];
        };
        resolvedDefaultFeatures = [ "compression" "compression-bzip2" "compression-deflate" "default" ];
      };
      "sequoia-openpgp" = rec {
        crateName = "sequoia-openpgp";
        version = "0.20.0";
        edition = "2018";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./openpgp; };
        authors = [
          "Igor Matuszewski <igor@sequoia-pgp.org>"
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
          "Nora Widdecke <nora@sequoia-pgp.org>"
          "Wiktor Kwapisiewicz <wiktor@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "backtrace";
            packageId = "backtrace";
          }
          {
            name = "base64";
            packageId = "base64 0.13.0";
          }
          {
            name = "buffered-reader";
            packageId = "buffered-reader";
            usesDefaultFeatures = false;
          }
          {
            name = "bzip2";
            packageId = "bzip2";
            optional = true;
          }
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: target."windows";
            features = [ "rand" "u64_backend" ];
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
          }
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "memsec";
            packageId = "memsec";
            usesDefaultFeatures = false;
          }
          {
            name = "nettle";
            packageId = "nettle";
            optional = true;
          }
          {
            name = "num-bigint-dig";
            packageId = "num-bigint-dig";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: target."windows";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
          {
            name = "win-crypto-ng";
            packageId = "win-crypto-ng";
            optional = true;
            target = { target, features }: target."windows";
            features = [ "rand" ];
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: target."windows";
            features = [ "bcrypt" ];
          }
        ];
        buildDependencies = [
          {
            name = "lalrpop";
            packageId = "lalrpop";
          }
        ];
        devDependencies = [
          {
            name = "quickcheck";
            packageId = "quickcheck";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand";
            usesDefaultFeatures = false;
          }
          {
            name = "rpassword";
            packageId = "rpassword";
          }
        ];
        features = {
          "compression" = [ "compression-deflate" "compression-bzip2" ];
          "compression-bzip2" = [ "bzip2" "buffered-reader/compression-bzip2" ];
          "compression-deflate" = [ "flate2" "buffered-reader/compression-deflate" ];
          "crypto-cng" = [ "winapi" "win-crypto-ng" "ed25519-dalek" "num-bigint-dig" ];
          "crypto-nettle" = [ "nettle" ];
          "default" = [ "compression" "crypto-nettle" ];
          "vendored" = [ "vendored-nettle" ];
          "vendored-nettle" = [ "nettle/vendored" ];
        };
        resolvedDefaultFeatures = [ "bzip2" "compression" "compression-bzip2" "compression-deflate" "crypto-cng" "crypto-nettle" "default" "ed25519-dalek" "flate2" "nettle" "num-bigint-dig" "vendored" "vendored-nettle" "win-crypto-ng" "winapi" ];
      };
      "sequoia-openpgp-ffi" = rec {
        crateName = "sequoia-openpgp-ffi";
        version = "0.20.0";
        edition = "2018";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./openpgp-ffi; };type = [ "lib" "cdylib" "staticlib" ];
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "memsec";
            packageId = "memsec";
            usesDefaultFeatures = false;
          }
          {
            name = "sequoia-ffi-macros";
            packageId = "sequoia-ffi-macros";
          }
          {
            name = "sequoia-openpgp";
            packageId = "sequoia-openpgp";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "filetime";
            packageId = "filetime";
          }
        ];
        features = {
          "compression" = [ "sequoia-openpgp/compression" ];
          "compression-bzip2" = [ "sequoia-openpgp/compression-bzip2" ];
          "compression-deflate" = [ "sequoia-openpgp/compression-deflate" ];
          "crypto-cng" = [ "sequoia-openpgp/crypto-cng" ];
          "crypto-nettle" = [ "sequoia-openpgp/crypto-nettle" ];
          "default" = [ "sequoia-openpgp/default" ];
        };
        resolvedDefaultFeatures = [ "compression" "compression-bzip2" "compression-deflate" "crypto-cng" "crypto-nettle" "default" ];
      };
      "sequoia-sop" = rec {
        crateName = "sequoia-sop";
        version = "0.20.0";
        edition = "2018";
        crateBin = [
          { name = "sqop"; path = "src/main.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./sop; };
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "sequoia-openpgp";
            packageId = "sequoia-openpgp";
            usesDefaultFeatures = false;
          }
          {
            name = "structopt";
            packageId = "structopt";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "compression" = [ "sequoia-openpgp/compression" ];
          "compression-bzip2" = [ "sequoia-openpgp/compression-bzip2" ];
          "compression-deflate" = [ "sequoia-openpgp/compression-deflate" ];
          "crypto-cng" = [ "sequoia-openpgp/crypto-cng" ];
          "crypto-nettle" = [ "sequoia-openpgp/crypto-nettle" ];
          "default" = [ "sequoia-openpgp/default" ];
        };
        resolvedDefaultFeatures = [ "compression" "compression-bzip2" "compression-deflate" "crypto-cng" "crypto-nettle" "default" ];
      };
      "sequoia-sq" = rec {
        crateName = "sequoia-sq";
        version = "0.20.0";
        edition = "2018";
        crateBin = [
          { name = "sq"; path = "src/sq-usage.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./sq; };
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "buffered-reader";
            packageId = "buffered-reader";
            usesDefaultFeatures = false;
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "crossterm";
            packageId = "crossterm";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "prettytable-rs";
            packageId = "prettytable-rs";
          }
          {
            name = "rpassword";
            packageId = "rpassword";
          }
          {
            name = "sequoia-autocrypt";
            packageId = "sequoia-autocrypt";
            usesDefaultFeatures = false;
          }
          {
            name = "sequoia-core";
            packageId = "sequoia-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sequoia-ipc";
            packageId = "sequoia-ipc";
            usesDefaultFeatures = false;
          }
          {
            name = "sequoia-net";
            packageId = "sequoia-net";
            usesDefaultFeatures = false;
          }
          {
            name = "sequoia-openpgp";
            packageId = "sequoia-openpgp";
            usesDefaultFeatures = false;
          }
          {
            name = "sequoia-store";
            packageId = "sequoia-store";
            usesDefaultFeatures = false;
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio-core";
            packageId = "tokio-core";
          }
        ];
        buildDependencies = [
          {
            name = "clap";
            packageId = "clap";
          }
        ];
        devDependencies = [
          {
            name = "assert_cli";
            packageId = "assert_cli";
          }
        ];
        features = {
          "compression" = [ "buffered-reader/compression" "sequoia-openpgp/compression" ];
          "compression-bzip2" = [ "buffered-reader/compression-bzip2" "sequoia-openpgp/compression-bzip2" ];
          "compression-deflate" = [ "buffered-reader/compression-deflate" "sequoia-openpgp/compression-deflate" ];
          "crypto-cng" = [ "sequoia-openpgp/crypto-cng" ];
          "crypto-nettle" = [ "sequoia-openpgp/crypto-nettle" ];
          "default" = [ "buffered-reader/compression" "sequoia-openpgp/default" "sequoia-store/background-services" ];
        };
        resolvedDefaultFeatures = [ "compression" "compression-bzip2" "compression-deflate" "crypto-cng" "crypto-nettle" "default" ];
      };
      "sequoia-sqv" = rec {
        crateName = "sequoia-sqv";
        version = "0.20.0";
        edition = "2018";
        crateBin = [
          { name = "sqv"; path = "src/sqv-usage.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./sqv; };
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "sequoia-openpgp";
            packageId = "sequoia-openpgp";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "clap";
            packageId = "clap";
          }
        ];
        devDependencies = [
          {
            name = "assert_cli";
            packageId = "assert_cli";
          }
        ];
        features = {
          "compression" = [ "sequoia-openpgp/compression" ];
          "compression-bzip2" = [ "sequoia-openpgp/compression-bzip2" ];
          "compression-deflate" = [ "sequoia-openpgp/compression-deflate" ];
          "crypto-cng" = [ "sequoia-openpgp/crypto-cng" ];
          "crypto-nettle" = [ "sequoia-openpgp/crypto-nettle" ];
          "default" = [ "crypto-nettle" ];
        };
        resolvedDefaultFeatures = [ "compression" "compression-bzip2" "compression-deflate" "crypto-cng" "crypto-nettle" "default" ];
      };
      "sequoia-store" = rec {
        crateName = "sequoia-store";
        version = "0.20.0";
        edition = "2018";
        crateBin = [
          { name = "sequoia-public-key-store"; path = "src/server.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./store; };
        libName = "sequoia_store";
        authors = [
          "Justus Winter <justus@sequoia-pgp.org>"
          "Kai Michaelis <kai@sequoia-pgp.org>"
          "Neal H. Walfield <neal@sequoia-pgp.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "capnp";
            packageId = "capnp";
          }
          {
            name = "capnp-rpc";
            packageId = "capnp-rpc";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "rand";
            packageId = "rand";
            usesDefaultFeatures = false;
          }
          {
            name = "rusqlite";
            packageId = "rusqlite";
          }
          {
            name = "rusqlite";
            packageId = "rusqlite";
            target = { target, features }: (target."os" == "android");
            features = [ "bundled" ];
          }
          {
            name = "sequoia-core";
            packageId = "sequoia-core";
          }
          {
            name = "sequoia-ipc";
            packageId = "sequoia-ipc";
            usesDefaultFeatures = false;
          }
          {
            name = "sequoia-net";
            packageId = "sequoia-net";
            usesDefaultFeatures = false;
          }
          {
            name = "sequoia-openpgp";
            packageId = "sequoia-openpgp";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio-core";
            packageId = "tokio-core";
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
        ];
        buildDependencies = [
          {
            name = "capnpc";
            packageId = "capnpc";
          }
        ];
        features = {
          "compression" = [ "sequoia-openpgp/compression" ];
          "compression-bzip2" = [ "sequoia-openpgp/compression-bzip2" ];
          "compression-deflate" = [ "sequoia-openpgp/compression-deflate" ];
          "crypto-cng" = [ "sequoia-openpgp/crypto-cng" ];
          "crypto-nettle" = [ "sequoia-openpgp/crypto-nettle" ];
          "default" = [ "background-services" "sequoia-openpgp/default" ];
        };
        resolvedDefaultFeatures = [ "background-services" "compression" "compression-bzip2" "compression-deflate" "crypto-cng" "crypto-nettle" "default" ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.116";
        edition = "2015";
        sha256 = "19bhld1qyjs4qr3rd6dmzmy13imb6a1qbinb2fjqd0yjh6pmgzln";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "serde_derive" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.116";
        edition = "2015";
        sha256 = "1s4sbl32lk1afxryfax73clvq22lwzdgzljb7f3mgr6q1wvscc7n";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.59";
        edition = "2018";
        sha256 = "15bblpgzbr163sxfxx0h8kacchmiiskypfbah5zmxim1zzdhgb6w";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "preserve_order" = [ "indexmap" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha2 0.8.2" = rec {
        crateName = "sha2";
        version = "0.8.2";
        edition = "2015";
        sha256 = "0s9yddvyg6anaikdl86wmwfim25c0d4m0xq0y2ghs34alxpg8mm2";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.7.3";
          }
          {
            name = "digest";
            packageId = "digest 0.8.1";
          }
          {
            name = "fake-simd";
            packageId = "fake-simd";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug 0.2.3";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.8.1";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" "libc" ];
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha2 0.9.1" = rec {
        crateName = "sha2";
        version = "0.9.1";
        edition = "2018";
        sha256 = "1hdqrx2d9073hgf34y6ilgw6ni5vv3d5nmccyhkfm9zdvy6kfcr9";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.9.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "cpuid-bool";
            packageId = "cpuid-bool";
            target = { target, features }: ((target."arch" == "x86") || (target."arch" == "x86_64"));
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug 0.3.0";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.9.0";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" "libc" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1lmv6san7g8dv6jdfp14m7bdczq9ss7j7bgsfqyqjc3jnjfippvz";
        authors = [
          "comex <comexk@gmail.com>"
        ];
        
      };
      "signature" = rec {
        crateName = "signature";
        version = "1.2.2";
        edition = "2018";
        sha256 = "04325sgl06mksq21a95sbdadg3r3jn3l3nhhxj839qs7s6kn1w19";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "default" = [ "std" ];
          "derive-preview" = [ "digest-preview" "signature_derive" ];
          "digest-preview" = [ "digest" ];
          "rand-preview" = [ "rand_core" ];
        };
      };
      "siphasher" = rec {
        crateName = "siphasher";
        version = "0.3.3";
        edition = "2015";
        sha256 = "1dw648sij9rarz5rk58zrjmxm70c6xl60d6rkd8pabipqx0kg3zs";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = [ "std" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1y59xsa27jk84sxzswjk60xcjf8b4fm5960jwpznrrcmasyva4f1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        
      };
      "smallvec 0.6.13" = rec {
        crateName = "smallvec";
        version = "0.6.13";
        edition = "2015";
        sha256 = "1dl219vnfkmsfx28lm3f83lyw24zap6fdsli6rg8nnp1aa67bc7p";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        dependencies = [
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec 1.4.2" = rec {
        crateName = "smallvec";
        version = "1.4.2";
        edition = "2018";
        sha256 = "0lp2ax6hfbcsqa92xkdz8vnlfc0fhpqczv62l64kvgsbp2b7dvpv";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
        };
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.3.15";
        edition = "2018";
        sha256 = "0i0wkamjq7d8v4dbl6fd7phmmlr1lbkyvrsgdw4yq141bkf71ymi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
            target = { target, features }: (target."unix" || (target."os" == "redox"));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" || (target."os" == "redox"));
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "handleapi" "ws2def" "ws2ipdef" "ws2tcpip" "minwindef" ];
          }
        ];
        features = {
        };
      };
      "spin" = rec {
        crateName = "spin";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0b84m6dbzrwf2kxylnw82d3dr8w06av7rfkr8s85fb5f43rwyqvf";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
        ];
        
      };
      "string" = rec {
        crateName = "string";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0vaxz85ja52fn66akgvggb29wqa5bpj3y38syykpr1pbrjzi8hfj";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
        ];
        features = {
          "default" = [ "bytes" ];
        };
        resolvedDefaultFeatures = [ "bytes" "default" ];
      };
      "string_cache" = rec {
        crateName = "string_cache";
        version = "0.8.0";
        edition = "2018";
        sha256 = "12i0synp8l0qpnzi5qki4pjq3jx28ykikyffjjjg6fsfxddwfh19";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "new_debug_unreachable";
            packageId = "new_debug_unreachable";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
          {
            name = "precomputed-hash";
            packageId = "precomputed-hash";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        
      };
      "strsim 0.8.0" = rec {
        crateName = "strsim";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0sjsm7hrvjdifz661pjxq5w4hf190hx53fra8dfvamacvff139cf";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];
        
      };
      "strsim 0.9.3" = rec {
        crateName = "strsim";
        version = "0.9.3";
        edition = "2015";
        sha256 = "0k497pv882qn3q977ckznm13vxx927g8s1swvcv68j3c1pccwik4";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];
        
      };
      "structopt" = rec {
        crateName = "structopt";
        version = "0.3.20";
        edition = "2018";
        sha256 = "1f1f26rzf1drx5za3p591na4zizkbgin9y8n1fp9yi7cjh166v8j";
        authors = [
          "Guillaume Pinot <texitoi@texitoi.eu>"
          "others"
        ];
        dependencies = [
          {
            name = "clap";
            packageId = "clap";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "structopt-derive";
            packageId = "structopt-derive";
          }
        ];
        features = {
          "color" = [ "clap/color" ];
          "debug" = [ "clap/debug" ];
          "default" = [ "clap/default" ];
          "doc" = [ "clap/doc" ];
          "lints" = [ "clap/lints" ];
          "no_cargo" = [ "clap/no_cargo" ];
          "paw" = [ "structopt-derive/paw" "paw_dep" ];
          "suggestions" = [ "clap/suggestions" ];
          "wrap_help" = [ "clap/wrap_help" ];
          "yaml" = [ "clap/yaml" ];
        };
      };
      "structopt-derive" = rec {
        crateName = "structopt-derive";
        version = "0.4.13";
        edition = "2018";
        sha256 = "1s4imsva3xnsz61kq3j3vs4p40qlzidgywa9acha48wy5x4irrb5";
        procMacro = true;
        authors = [
          "Guillaume Pinot <texitoi@texitoi.eu>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        features = {
        };
      };
      "subtle" = rec {
        crateName = "subtle";
        version = "2.3.0";
        edition = "2015";
        sha256 = "1zg727iw7wh4h1fjljm6yancz75i41rg352y2n7r05991i8kygrl";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
      };
      "syn" = rec {
        crateName = "syn";
        version = "1.0.44";
        edition = "2018";
        sha256 = "1pcgid686cddmk992pmy5ljvf4map7628gnm8ac79rxzzkj5fgp0";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.12.4";
        edition = "2018";
        sha256 = "00c72ij813xsilssgya6m6f73d0s5zzsld1y26bvhk3kdzbg4d5q";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.1.0";
        edition = "2018";
        sha256 = "1a9cfdqw70n7bcnkx05aih9xdba8lqazmqlkjpkmn2la6gcj8vks";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <jasonaw0@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "remove_dir_all";
            packageId = "remove_dir_all";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "fileapi" "handleapi" "winbase" ];
          }
        ];
        
      };
      "term" = rec {
        crateName = "term";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0hkgjrfisj6zjwz525639pmsvzhlc48a0h65nw87qrdp6jihdlgd";
        authors = [
          "The Rust Project Developers"
          "Steven Allen"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "dirs";
            packageId = "dirs 1.0.5";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "consoleapi" "wincon" "handleapi" "fileapi" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "textwrap" = rec {
        crateName = "textwrap";
        version = "0.11.0";
        edition = "2015";
        sha256 = "0q5hky03ik3y50s9sz25r438bc4nwhqc6dqwynv4wylc807n29nk";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        
      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.21";
        edition = "2018";
        sha256 = "0hlvhsa1bf8yrynpmkw0154rsr2zkcvbims0kbz2029flbzk90ii";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];
        
      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.21";
        edition = "2018";
        sha256 = "1ay06mahcnmz1l58n9mxp06d4siapsll17wrjcs6qy42c9xl9qna";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        
      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.0.1";
        edition = "2015";
        sha256 = "054vlrr1vsdy1h4b7n99mr24pnj8928ig9qwzg36wnkld4dns36l";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        
      };
      "time" = rec {
        crateName = "time";
        version = "0.1.44";
        edition = "2015";
        sha256 = "0m9jwy2pcmk232r3b9r80fs12mkckfjffjha4qfaxcdq9a8ydfbd";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "wasi";
            packageId = "wasi 0.10.0+wasi-snapshot-preview1";
            target = { target, features }: (target."os" == "wasi");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: target."windows";
            features = [ "std" "minwinbase" "minwindef" "ntdef" "profileapi" "sysinfoapi" "timezoneapi" ];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            features = [ "std" "processthreadsapi" "winbase" ];
          }
        ];
        
      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "0.3.4";
        edition = "2018";
        sha256 = "05vijqpckjsnbv07rwadwcny4pkcq7z1wi9ikl7p3ib7s9qy1313";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "tokio" = rec {
        crateName = "tokio";
        version = "0.1.22";
        edition = "2015";
        sha256 = "1xhaadfmm6m37f79xv5020gc3np9wqza3bq95ymp522qpfsw02as";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "mio";
            packageId = "mio";
            optional = true;
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
            optional = true;
          }
          {
            name = "tokio-codec";
            packageId = "tokio-codec";
            optional = true;
          }
          {
            name = "tokio-current-thread";
            packageId = "tokio-current-thread";
            optional = true;
          }
          {
            name = "tokio-executor";
            packageId = "tokio-executor";
            optional = true;
          }
          {
            name = "tokio-fs";
            packageId = "tokio-fs";
            optional = true;
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
            optional = true;
          }
          {
            name = "tokio-reactor";
            packageId = "tokio-reactor";
            optional = true;
          }
          {
            name = "tokio-sync";
            packageId = "tokio-sync";
            optional = true;
          }
          {
            name = "tokio-tcp";
            packageId = "tokio-tcp";
            optional = true;
          }
          {
            name = "tokio-threadpool";
            packageId = "tokio-threadpool";
            optional = true;
          }
          {
            name = "tokio-timer";
            packageId = "tokio-timer";
            optional = true;
          }
          {
            name = "tokio-udp";
            packageId = "tokio-udp";
            optional = true;
          }
          {
            name = "tokio-uds";
            packageId = "tokio-uds";
            optional = true;
            target = { target, features }: target."unix";
          }
        ];
        devDependencies = [
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];
        features = {
          "codec" = [ "io" "tokio-codec" ];
          "default" = [ "codec" "fs" "io" "reactor" "rt-full" "sync" "tcp" "timer" "udp" "uds" ];
          "experimental-tracing" = [ "tracing-core" ];
          "fs" = [ "tokio-fs" ];
          "io" = [ "bytes" "tokio-io" ];
          "reactor" = [ "io" "mio" "tokio-reactor" ];
          "rt-full" = [ "num_cpus" "reactor" "timer" "tokio-current-thread" "tokio-executor" "tokio-threadpool" ];
          "sync" = [ "tokio-sync" ];
          "tcp" = [ "tokio-tcp" ];
          "timer" = [ "tokio-timer" ];
          "udp" = [ "tokio-udp" ];
          "uds" = [ "tokio-uds" ];
        };
        resolvedDefaultFeatures = [ "bytes" "codec" "default" "fs" "io" "mio" "num_cpus" "reactor" "rt-full" "sync" "tcp" "timer" "tokio-codec" "tokio-current-thread" "tokio-executor" "tokio-fs" "tokio-io" "tokio-reactor" "tokio-sync" "tokio-tcp" "tokio-threadpool" "tokio-timer" "tokio-udp" "tokio-uds" "udp" "uds" ];
      };
      "tokio-buf" = rec {
        crateName = "tokio-buf";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0inwrkh8knqy44mr9h2i305zyy4pxhfy90y0gr5rm1akdks21clg";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "either";
            packageId = "either";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        features = {
          "default" = [ "util" ];
          "util" = [ "bytes/either" "either" ];
        };
        resolvedDefaultFeatures = [ "default" "either" "util" ];
      };
      "tokio-codec" = rec {
        crateName = "tokio-codec";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0swpfngcb331lzggk6j68yks6w0bnw35vpl4hv8p03msc239kci5";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Bryan Burgers <bryan@burgers.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
        ];
        
      };
      "tokio-core" = rec {
        crateName = "tokio-core";
        version = "0.1.17";
        edition = "2015";
        sha256 = "0wbgg59mxfvrhzv97y56nh3gmnmw3jj9dhgkmvz27410jjxzpvxf";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mio";
            packageId = "mio";
          }
          {
            name = "scoped-tls";
            packageId = "scoped-tls";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-executor";
            packageId = "tokio-executor";
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
          {
            name = "tokio-reactor";
            packageId = "tokio-reactor";
          }
          {
            name = "tokio-timer";
            packageId = "tokio-timer";
          }
        ];
        
      };
      "tokio-current-thread" = rec {
        crateName = "tokio-current-thread";
        version = "0.1.7";
        edition = "2015";
        sha256 = "03p2w316ha0irgzvy37njx9hl71133gcrmrq4801w4rzm0r0xpmi";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "tokio-executor";
            packageId = "tokio-executor";
          }
        ];
        
      };
      "tokio-executor" = rec {
        crateName = "tokio-executor";
        version = "0.1.10";
        edition = "2015";
        sha256 = "0w8n78d2vixs1vghqc4wy9w0d1h6qkli51c1yzhzbns88n7inbgv";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        
      };
      "tokio-fs" = rec {
        crateName = "tokio-fs";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1x3gkdi5x7bjlzzg7qlnymb549rb546p0nykxsh04qyaw0314yi9";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
          {
            name = "tokio-threadpool";
            packageId = "tokio-threadpool";
          }
        ];
        devDependencies = [
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
        ];
        
      };
      "tokio-io" = rec {
        crateName = "tokio-io";
        version = "0.1.13";
        edition = "2015";
        sha256 = "0x06zyzinans1pn90g6i150lgixijdf1cg8y2gipjd09ms58dz2p";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
        ];
        
      };
      "tokio-named-pipes" = rec {
        crateName = "tokio-named-pipes";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1bjy59wdl2anl22w6qyzkff1afv7ynayfpms10iqna2j6142sa4x";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Nikolay Volf <nikvolf@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "mio";
            packageId = "mio";
          }
          {
            name = "mio-named-pipes";
            packageId = "mio-named-pipes";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        
      };
      "tokio-reactor" = rec {
        crateName = "tokio-reactor";
        version = "0.1.12";
        edition = "2015";
        sha256 = "0l8klnd41q55f3ialzz0lb7s5bfwa38nh86sa9vai2xsqh75kg09";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mio";
            packageId = "mio";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio-executor";
            packageId = "tokio-executor";
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
          {
            name = "tokio-sync";
            packageId = "tokio-sync";
          }
        ];
        devDependencies = [
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];
        
      };
      "tokio-sync" = rec {
        crateName = "tokio-sync";
        version = "0.1.8";
        edition = "2015";
        sha256 = "1vkxz0y7qf9sshfpxvn506pvxy4vza8piavd8p64y5n85cam1zpd";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        
      };
      "tokio-tcp" = rec {
        crateName = "tokio-tcp";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0whzqnkyfym1ipzznibyjl3j9281walq4n0q5xs2xdz3cvniipwq";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
          {
            name = "mio";
            packageId = "mio";
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
          {
            name = "tokio-reactor";
            packageId = "tokio-reactor";
          }
        ];
        
      };
      "tokio-threadpool" = rec {
        crateName = "tokio-threadpool";
        version = "0.1.18";
        edition = "2015";
        sha256 = "12azq8jm71b7hdm72pxrgqm2879bn6b0fcdl1s7i2k3qh5jhnwnz";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "crossbeam-queue";
            packageId = "crossbeam-queue";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio-executor";
            packageId = "tokio-executor";
          }
        ];
        
      };
      "tokio-timer" = rec {
        crateName = "tokio-timer";
        version = "0.2.13";
        edition = "2015";
        sha256 = "15pjjj6daks3sii8p24a509b0dapl2kyk740nwfgz59w64nly14k";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio-executor";
            packageId = "tokio-executor";
          }
        ];
        
      };
      "tokio-udp" = rec {
        crateName = "tokio-udp";
        version = "0.1.6";
        edition = "2015";
        sha256 = "10hdcnxdp0dxvj44jl1nrrpg30jbisqclbqs0f5w6f8bc47b3872";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mio";
            packageId = "mio";
          }
          {
            name = "tokio-codec";
            packageId = "tokio-codec";
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
          {
            name = "tokio-reactor";
            packageId = "tokio-reactor";
          }
        ];
        
      };
      "tokio-uds" = rec {
        crateName = "tokio-uds";
        version = "0.2.7";
        edition = "2015";
        sha256 = "1q74sydx22l4mkmrz02l4i5swddwr1pryxvhrzdwkj0i86na8mxb";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mio";
            packageId = "mio";
          }
          {
            name = "mio-uds";
            packageId = "mio-uds";
          }
          {
            name = "tokio-codec";
            packageId = "tokio-codec";
          }
          {
            name = "tokio-io";
            packageId = "tokio-io";
          }
          {
            name = "tokio-reactor";
            packageId = "tokio-reactor";
          }
        ];
        
      };
      "try-lock" = rec {
        crateName = "try-lock";
        version = "0.2.3";
        edition = "2015";
        sha256 = "0hkn1ksmg5hdqgqdw1ahy5qk69f4crh2psf0v61qphyrf777nm2r";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.12.0";
        edition = "2015";
        sha256 = "0cvbksljz61ian21fnn0h51kphl0pwpzb932bv4s0rwy1wh8lg1p";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.4";
        edition = "2015";
        sha256 = "1malx8ljgm7v1gbaazkn7iicy5wj0bwcyadj3l727a38ch6bvwj9";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
        ];
        features = {
          "flame_it" = [ "flame" "flamer" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.13";
        edition = "2018";
        sha256 = "0xx9k05f82yf5wmhniq6nsplvszb4536kpv2l606m37sd7vrrcbg";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.6.0";
        edition = "2015";
        sha256 = "1h7d48mzpi8hwf5cvnq07warkv86pvapzzzf32hvbjsk20yiagp8";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.8";
        edition = "2015";
        sha256 = "1qxizyi6xbcqyi4z79p523ywvmgsfcgfqb3zv3c8i6x1jcc5jdwk";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0r6mknipyy9vpz8mwmxvkx65ff2ha1n2pxqjj6f46lcn8yrhpzpp";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "url" = rec {
        crateName = "url";
        version = "2.1.1";
        edition = "2015";
        sha256 = "1jw7cw8br4xvjb92ddrrh1r7jvqhyhiknnnfpgq9np63fs24m7c2";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];
        
      };
      "vcpkg" = rec {
        crateName = "vcpkg";
        version = "0.2.10";
        edition = "2015";
        sha256 = "132hlmsc4maava91vl4lh677sl1c7vr8ccl53fnr5w41y6dh4m34";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];
        
      };
      "vec_map" = rec {
        crateName = "vec_map";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1481w9g1dw9rxp3l6snkdqihzyrd2f8vispzqmwjwsdyhw8xzggi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
        };
      };
      "version_check 0.1.5" = rec {
        crateName = "version_check";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1pf91pvj8n6akh7w6j5ypka6aqz08b3qpzgs0ak2kjf4frkiljwi";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        
      };
      "version_check 0.9.2" = rec {
        crateName = "version_check";
        version = "0.9.2";
        edition = "2015";
        sha256 = "1vbaqdf802qinsq8q20w8w0qn2pv0rkq5p73ijcblrwxcvjp5adm";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        
      };
      "want" = rec {
        crateName = "want";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0c52g7b4hhj033jc56sx9z3krivyciz0hlblixq2gc448zx5wfdn";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "try-lock";
            packageId = "try-lock";
          }
        ];
        
      };
      "wasi 0.10.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.10.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "07y3l8mzfzzz4cj09c8y90yak4hpsi9g7pllyzpr6xvwrabka50s";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi 0.9.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.9.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "06g5v3vrdapfzvfq662cij7v8a1flwr2my45nnncdv2galrdzkfc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "win-crypto-ng" = rec {
        crateName = "win-crypto-ng";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0ab0iwl4bmqvysypyn6xgax7rlh3w524jji2y1zfwfpdr7wwyv23";
        authors = [
          "Émile Grégoire <eg@emilegregoire.ca>"
          "Igor Matuszewski <Xanewok@gmail.com>"
        ];
        dependencies = [
          {
            name = "doc-comment";
            packageId = "doc-comment";
          }
          {
            name = "rand_core";
            packageId = "rand_core";
            optional = true;
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            features = [ "bcrypt" "ntstatus" "winerror" ];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "doc-comment";
            packageId = "doc-comment";
          }
        ];
        features = {
          "default" = [ "zeroize" ];
          "rand" = [ "rand_core" ];
        };
        resolvedDefaultFeatures = [ "default" "rand" "rand_core" "zeroize" ];
      };
      "winapi 0.2.8" = rec {
        crateName = "winapi";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0yh816lh6lf56dpsgxy189c2ai1z3j8mw9si6izqb6wsjkbcjz8n";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi 0.3.9" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "accctrl" "aclapi" "bcrypt" "consoleapi" "errhandlingapi" "fileapi" "handleapi" "ioapiset" "knownfolders" "libloaderapi" "lmcons" "minschannel" "minwinbase" "minwindef" "namedpipeapi" "ntdef" "ntstatus" "objbase" "processenv" "processthreadsapi" "profileapi" "schannel" "securitybaseapi" "shlobj" "sspi" "std" "synchapi" "sysinfoapi" "timezoneapi" "winbase" "wincon" "wincrypt" "winerror" "winnt" "winsock2" "winuser" "ws2def" "ws2ipdef" "ws2tcpip" ];
      };
      "winapi-build" = rec {
        crateName = "winapi-build";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1g4rqsgjky0a7530qajn2bbfcrl2v0zb39idgdws9b1l7gp5wc9d";
        libName = "build";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "ws2_32-sys" = rec {
        crateName = "ws2_32-sys";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0ppscg5qfqaw0gzwv2a4nhn5bn01ff9iwn6ysqnzm4n8s3myz76m";
        libName = "ws2_32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
      "zbase32" = rec {
        crateName = "zbase32";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0gz3nmiaidscb5c85rh3qxi8i584gz5xm3amlxqminl8jq27k40g";
        authors = [
          "Peter Gerber <peter@arbitrary.ch>"
        ];
        features = {
        };
      };
      "zeroize" = rec {
        crateName = "zeroize";
        version = "1.1.1";
        edition = "2018";
        sha256 = "12m2ypry9vbh6j89gy2fbill72xrjkmr214bb39x5nvaarr3kwq5";
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "zeroize_derive";
            packageId = "zeroize_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "zeroize_derive" ];
      };
      "zeroize_derive" = rec {
        crateName = "zeroize_derive";
        version = "1.0.1";
        edition = "2018";
        sha256 = "05jx6j2c078f41ik0xgc5lb0z7yjfhgg76x43akanql8n7fnkwy3";
        procMacro = true;
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
     This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os =
      if stdenv.hostPlatform.isDarwin
      then "macos"
      else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
     of crate given as the second argument.

     testCrateFlags: list of flags to pass to the test exectuable
     testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
        in
        pkgs.runCommand "run-tests-${testCrate.name}" {
          inherit testCrateFlags;
          buildInputs = testInputs;
        } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            $f $testCrateFlags 2>&1 | tee -a $out
          done
        '';
    in
    crate.overrideAttrs
      (
        old: {
          checkPhase = ''
            test -e ${test}
          '';
          passthru = (old.passthru or { }) // {
            inherit test;
          };
        }
      );

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        }:
        let
          buildRustCrateFuncOverriden =
            if buildRustCrateFunc != null
            then buildRustCrateFunc
            else (
              if crateOverrides == pkgs.defaultCrateOverrides
              then buildRustCrate
              else buildRustCrate.override {
                defaultCrateOverrides = crateOverrides;
              }
            );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateFunc = buildRustCrateFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateFunc = buildRustCrateFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.${packageId};
          testDrv = builtTestRustCrates.${packageId};
          derivation =
            if runTests then
              crateWithTest {
                crate = drv;
                testCrate = testDrv;
                inherit testCrateFlags testInputs;
              }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateFunc
     for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = target // { test = runTests; };
            }
          );
        buildByPackageId = packageId: buildByPackageIdImpl packageId;

        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageId =
          lib.mapAttrs (packageId: value: buildByPackageId packageId) crateConfigs;
        buildByPackageIdImpl = packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies = crateConfig.buildDependencies or [ ];
              };
            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };
            dependenciesWithRenames =
              lib.filter (d: d ? "rename")
                (
                  filterEnabledDependenciesForThis
                    (
                      (crateConfig.buildDependencies or [ ])
                      ++ (crateConfig.dependencies or [ ])
                      ++ devDependencies
                    )
                );
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = builtByPackageId."${dep.packageId}";
                  in
                  { inherit (dep) rename; version = package.version; };
              in
              lib.mapAttrs (name: choices: builtins.map versionAndRename choices) grouped;
          in
          buildRustCrateFunc
            (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { builtByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isAttrs builtByPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: builtByPackageId.${dependency.packageId};
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
     be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateFunc = lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateFunc = crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
     features.

     This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

     If multiple paths to a dependency enable different features, the
     corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures expandedFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = expandedFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else mergePackageFeatures {
                  features = combinedFeatures;
                  featuresByPackageId = cache;
                  inherit crateConfigs packageId target runTests rootPackageId;
                }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ expandedFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = { name, rename ? null, ... }: feature:
    let
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    (rename == null && feature == name)
    || (rename != null && rename == feature)
    || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
     rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further
     feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or [ ]));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
    sortedUnique outFeatures;

  /*
     Returns the actual features for the given dependency.

     features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
        builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #

  };
}
